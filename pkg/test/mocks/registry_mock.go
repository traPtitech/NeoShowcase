// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/traPtitech/neoshowcase/pkg/domain/builder"
	"sync"
)

// Ensure, that RegistryClientMock does implement builder.RegistryClient.
// If this is not the case, regenerate this file with moq.
var _ builder.RegistryClient = &RegistryClientMock{}

// RegistryClientMock is a mock implementation of builder.RegistryClient.
//
//	func TestSomethingThatUsesRegistryClient(t *testing.T) {
//
//		// make and configure a mocked builder.RegistryClient
//		mockedRegistryClient := &RegistryClientMock{
//			DeleteImageFunc: func(ctx context.Context, image string, tag string) error {
//				panic("mock out the DeleteImage method")
//			},
//			GetImageSizeFunc: func(ctx context.Context, image string, tag string) (int64, error) {
//				panic("mock out the GetImageSize method")
//			},
//			GetTagsFunc: func(ctx context.Context, image string) ([]string, error) {
//				panic("mock out the GetTags method")
//			},
//		}
//
//		// use mockedRegistryClient in code that requires builder.RegistryClient
//		// and then make assertions.
//
//	}
type RegistryClientMock struct {
	// DeleteImageFunc mocks the DeleteImage method.
	DeleteImageFunc func(ctx context.Context, image string, tag string) error

	// GetImageSizeFunc mocks the GetImageSize method.
	GetImageSizeFunc func(ctx context.Context, image string, tag string) (int64, error)

	// GetTagsFunc mocks the GetTags method.
	GetTagsFunc func(ctx context.Context, image string) ([]string, error)

	// calls tracks calls to the methods.
	calls struct {
		// DeleteImage holds details about calls to the DeleteImage method.
		DeleteImage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Image is the image argument value.
			Image string
			// Tag is the tag argument value.
			Tag string
		}
		// GetImageSize holds details about calls to the GetImageSize method.
		GetImageSize []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Image is the image argument value.
			Image string
			// Tag is the tag argument value.
			Tag string
		}
		// GetTags holds details about calls to the GetTags method.
		GetTags []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Image is the image argument value.
			Image string
		}
	}
	lockDeleteImage  sync.RWMutex
	lockGetImageSize sync.RWMutex
	lockGetTags      sync.RWMutex
}

// DeleteImage calls DeleteImageFunc.
func (mock *RegistryClientMock) DeleteImage(ctx context.Context, image string, tag string) error {
	callInfo := struct {
		Ctx   context.Context
		Image string
		Tag   string
	}{
		Ctx:   ctx,
		Image: image,
		Tag:   tag,
	}
	mock.lockDeleteImage.Lock()
	mock.calls.DeleteImage = append(mock.calls.DeleteImage, callInfo)
	mock.lockDeleteImage.Unlock()
	if mock.DeleteImageFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeleteImageFunc(ctx, image, tag)
}

// DeleteImageCalls gets all the calls that were made to DeleteImage.
// Check the length with:
//
//	len(mockedRegistryClient.DeleteImageCalls())
func (mock *RegistryClientMock) DeleteImageCalls() []struct {
	Ctx   context.Context
	Image string
	Tag   string
} {
	var calls []struct {
		Ctx   context.Context
		Image string
		Tag   string
	}
	mock.lockDeleteImage.RLock()
	calls = mock.calls.DeleteImage
	mock.lockDeleteImage.RUnlock()
	return calls
}

// GetImageSize calls GetImageSizeFunc.
func (mock *RegistryClientMock) GetImageSize(ctx context.Context, image string, tag string) (int64, error) {
	callInfo := struct {
		Ctx   context.Context
		Image string
		Tag   string
	}{
		Ctx:   ctx,
		Image: image,
		Tag:   tag,
	}
	mock.lockGetImageSize.Lock()
	mock.calls.GetImageSize = append(mock.calls.GetImageSize, callInfo)
	mock.lockGetImageSize.Unlock()
	if mock.GetImageSizeFunc == nil {
		var (
			nOut   int64
			errOut error
		)
		return nOut, errOut
	}
	return mock.GetImageSizeFunc(ctx, image, tag)
}

// GetImageSizeCalls gets all the calls that were made to GetImageSize.
// Check the length with:
//
//	len(mockedRegistryClient.GetImageSizeCalls())
func (mock *RegistryClientMock) GetImageSizeCalls() []struct {
	Ctx   context.Context
	Image string
	Tag   string
} {
	var calls []struct {
		Ctx   context.Context
		Image string
		Tag   string
	}
	mock.lockGetImageSize.RLock()
	calls = mock.calls.GetImageSize
	mock.lockGetImageSize.RUnlock()
	return calls
}

// GetTags calls GetTagsFunc.
func (mock *RegistryClientMock) GetTags(ctx context.Context, image string) ([]string, error) {
	callInfo := struct {
		Ctx   context.Context
		Image string
	}{
		Ctx:   ctx,
		Image: image,
	}
	mock.lockGetTags.Lock()
	mock.calls.GetTags = append(mock.calls.GetTags, callInfo)
	mock.lockGetTags.Unlock()
	if mock.GetTagsFunc == nil {
		var (
			stringsOut []string
			errOut     error
		)
		return stringsOut, errOut
	}
	return mock.GetTagsFunc(ctx, image)
}

// GetTagsCalls gets all the calls that were made to GetTags.
// Check the length with:
//
//	len(mockedRegistryClient.GetTagsCalls())
func (mock *RegistryClientMock) GetTagsCalls() []struct {
	Ctx   context.Context
	Image string
} {
	var calls []struct {
		Ctx   context.Context
		Image string
	}
	mock.lockGetTags.RLock()
	calls = mock.calls.GetTags
	mock.lockGetTags.RUnlock()
	return calls
}
