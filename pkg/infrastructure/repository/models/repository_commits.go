// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// RepositoryCommit is an object representing the database table.
type RepositoryCommit struct {
	// Commit SHA-1 Hash
	Hash string `boil:"hash" json:"hash" toml:"hash" yaml:"hash"`
	// Author Name
	AuthorName string `boil:"author_name" json:"author_name" toml:"author_name" yaml:"author_name"`
	// Author Email
	AuthorEmail string `boil:"author_email" json:"author_email" toml:"author_email" yaml:"author_email"`
	// Author Date
	AuthorDate time.Time `boil:"author_date" json:"author_date" toml:"author_date" yaml:"author_date"`
	// Committer Name
	CommitterName string `boil:"committer_name" json:"committer_name" toml:"committer_name" yaml:"committer_name"`
	// Committer Email
	CommitterEmail string `boil:"committer_email" json:"committer_email" toml:"committer_email" yaml:"committer_email"`
	// Commit Date
	CommitterDate time.Time `boil:"committer_date" json:"committer_date" toml:"committer_date" yaml:"committer_date"`
	// Commit Message
	Message string `boil:"message" json:"message" toml:"message" yaml:"message"`
	// メタ情報取得に失敗したか
	Error bool `boil:"error" json:"error" toml:"error" yaml:"error"`

	R *repositoryCommitR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L repositoryCommitL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RepositoryCommitColumns = struct {
	Hash           string
	AuthorName     string
	AuthorEmail    string
	AuthorDate     string
	CommitterName  string
	CommitterEmail string
	CommitterDate  string
	Message        string
	Error          string
}{
	Hash:           "hash",
	AuthorName:     "author_name",
	AuthorEmail:    "author_email",
	AuthorDate:     "author_date",
	CommitterName:  "committer_name",
	CommitterEmail: "committer_email",
	CommitterDate:  "committer_date",
	Message:        "message",
	Error:          "error",
}

var RepositoryCommitTableColumns = struct {
	Hash           string
	AuthorName     string
	AuthorEmail    string
	AuthorDate     string
	CommitterName  string
	CommitterEmail string
	CommitterDate  string
	Message        string
	Error          string
}{
	Hash:           "repository_commits.hash",
	AuthorName:     "repository_commits.author_name",
	AuthorEmail:    "repository_commits.author_email",
	AuthorDate:     "repository_commits.author_date",
	CommitterName:  "repository_commits.committer_name",
	CommitterEmail: "repository_commits.committer_email",
	CommitterDate:  "repository_commits.committer_date",
	Message:        "repository_commits.message",
	Error:          "repository_commits.error",
}

// Generated where

var RepositoryCommitWhere = struct {
	Hash           whereHelperstring
	AuthorName     whereHelperstring
	AuthorEmail    whereHelperstring
	AuthorDate     whereHelpertime_Time
	CommitterName  whereHelperstring
	CommitterEmail whereHelperstring
	CommitterDate  whereHelpertime_Time
	Message        whereHelperstring
	Error          whereHelperbool
}{
	Hash:           whereHelperstring{field: "`repository_commits`.`hash`"},
	AuthorName:     whereHelperstring{field: "`repository_commits`.`author_name`"},
	AuthorEmail:    whereHelperstring{field: "`repository_commits`.`author_email`"},
	AuthorDate:     whereHelpertime_Time{field: "`repository_commits`.`author_date`"},
	CommitterName:  whereHelperstring{field: "`repository_commits`.`committer_name`"},
	CommitterEmail: whereHelperstring{field: "`repository_commits`.`committer_email`"},
	CommitterDate:  whereHelpertime_Time{field: "`repository_commits`.`committer_date`"},
	Message:        whereHelperstring{field: "`repository_commits`.`message`"},
	Error:          whereHelperbool{field: "`repository_commits`.`error`"},
}

// RepositoryCommitRels is where relationship names are stored.
var RepositoryCommitRels = struct {
}{}

// repositoryCommitR is where relationships are stored.
type repositoryCommitR struct {
}

// NewStruct creates a new relationship struct
func (*repositoryCommitR) NewStruct() *repositoryCommitR {
	return &repositoryCommitR{}
}

// repositoryCommitL is where Load methods for each relationship are stored.
type repositoryCommitL struct{}

var (
	repositoryCommitAllColumns            = []string{"hash", "author_name", "author_email", "author_date", "committer_name", "committer_email", "committer_date", "message", "error"}
	repositoryCommitColumnsWithoutDefault = []string{"hash", "author_name", "author_email", "author_date", "committer_name", "committer_email", "committer_date", "message", "error"}
	repositoryCommitColumnsWithDefault    = []string{}
	repositoryCommitPrimaryKeyColumns     = []string{"hash"}
	repositoryCommitGeneratedColumns      = []string{}
)

type (
	// RepositoryCommitSlice is an alias for a slice of pointers to RepositoryCommit.
	// This should almost always be used instead of []RepositoryCommit.
	RepositoryCommitSlice []*RepositoryCommit
	// RepositoryCommitHook is the signature for custom RepositoryCommit hook methods
	RepositoryCommitHook func(context.Context, boil.ContextExecutor, *RepositoryCommit) error

	repositoryCommitQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	repositoryCommitType                 = reflect.TypeOf(&RepositoryCommit{})
	repositoryCommitMapping              = queries.MakeStructMapping(repositoryCommitType)
	repositoryCommitPrimaryKeyMapping, _ = queries.BindMapping(repositoryCommitType, repositoryCommitMapping, repositoryCommitPrimaryKeyColumns)
	repositoryCommitInsertCacheMut       sync.RWMutex
	repositoryCommitInsertCache          = make(map[string]insertCache)
	repositoryCommitUpdateCacheMut       sync.RWMutex
	repositoryCommitUpdateCache          = make(map[string]updateCache)
	repositoryCommitUpsertCacheMut       sync.RWMutex
	repositoryCommitUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var repositoryCommitAfterSelectMu sync.Mutex
var repositoryCommitAfterSelectHooks []RepositoryCommitHook

var repositoryCommitBeforeInsertMu sync.Mutex
var repositoryCommitBeforeInsertHooks []RepositoryCommitHook
var repositoryCommitAfterInsertMu sync.Mutex
var repositoryCommitAfterInsertHooks []RepositoryCommitHook

var repositoryCommitBeforeUpdateMu sync.Mutex
var repositoryCommitBeforeUpdateHooks []RepositoryCommitHook
var repositoryCommitAfterUpdateMu sync.Mutex
var repositoryCommitAfterUpdateHooks []RepositoryCommitHook

var repositoryCommitBeforeDeleteMu sync.Mutex
var repositoryCommitBeforeDeleteHooks []RepositoryCommitHook
var repositoryCommitAfterDeleteMu sync.Mutex
var repositoryCommitAfterDeleteHooks []RepositoryCommitHook

var repositoryCommitBeforeUpsertMu sync.Mutex
var repositoryCommitBeforeUpsertHooks []RepositoryCommitHook
var repositoryCommitAfterUpsertMu sync.Mutex
var repositoryCommitAfterUpsertHooks []RepositoryCommitHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RepositoryCommit) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range repositoryCommitAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RepositoryCommit) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range repositoryCommitBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RepositoryCommit) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range repositoryCommitAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RepositoryCommit) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range repositoryCommitBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RepositoryCommit) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range repositoryCommitAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RepositoryCommit) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range repositoryCommitBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RepositoryCommit) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range repositoryCommitAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RepositoryCommit) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range repositoryCommitBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RepositoryCommit) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range repositoryCommitAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRepositoryCommitHook registers your hook function for all future operations.
func AddRepositoryCommitHook(hookPoint boil.HookPoint, repositoryCommitHook RepositoryCommitHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		repositoryCommitAfterSelectMu.Lock()
		repositoryCommitAfterSelectHooks = append(repositoryCommitAfterSelectHooks, repositoryCommitHook)
		repositoryCommitAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		repositoryCommitBeforeInsertMu.Lock()
		repositoryCommitBeforeInsertHooks = append(repositoryCommitBeforeInsertHooks, repositoryCommitHook)
		repositoryCommitBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		repositoryCommitAfterInsertMu.Lock()
		repositoryCommitAfterInsertHooks = append(repositoryCommitAfterInsertHooks, repositoryCommitHook)
		repositoryCommitAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		repositoryCommitBeforeUpdateMu.Lock()
		repositoryCommitBeforeUpdateHooks = append(repositoryCommitBeforeUpdateHooks, repositoryCommitHook)
		repositoryCommitBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		repositoryCommitAfterUpdateMu.Lock()
		repositoryCommitAfterUpdateHooks = append(repositoryCommitAfterUpdateHooks, repositoryCommitHook)
		repositoryCommitAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		repositoryCommitBeforeDeleteMu.Lock()
		repositoryCommitBeforeDeleteHooks = append(repositoryCommitBeforeDeleteHooks, repositoryCommitHook)
		repositoryCommitBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		repositoryCommitAfterDeleteMu.Lock()
		repositoryCommitAfterDeleteHooks = append(repositoryCommitAfterDeleteHooks, repositoryCommitHook)
		repositoryCommitAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		repositoryCommitBeforeUpsertMu.Lock()
		repositoryCommitBeforeUpsertHooks = append(repositoryCommitBeforeUpsertHooks, repositoryCommitHook)
		repositoryCommitBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		repositoryCommitAfterUpsertMu.Lock()
		repositoryCommitAfterUpsertHooks = append(repositoryCommitAfterUpsertHooks, repositoryCommitHook)
		repositoryCommitAfterUpsertMu.Unlock()
	}
}

// One returns a single repositoryCommit record from the query.
func (q repositoryCommitQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RepositoryCommit, error) {
	o := &RepositoryCommit{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for repository_commits")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RepositoryCommit records from the query.
func (q repositoryCommitQuery) All(ctx context.Context, exec boil.ContextExecutor) (RepositoryCommitSlice, error) {
	var o []*RepositoryCommit

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RepositoryCommit slice")
	}

	if len(repositoryCommitAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RepositoryCommit records in the query.
func (q repositoryCommitQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count repository_commits rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q repositoryCommitQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if repository_commits exists")
	}

	return count > 0, nil
}

// RepositoryCommits retrieves all the records using an executor.
func RepositoryCommits(mods ...qm.QueryMod) repositoryCommitQuery {
	mods = append(mods, qm.From("`repository_commits`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`repository_commits`.*"})
	}

	return repositoryCommitQuery{q}
}

// FindRepositoryCommit retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRepositoryCommit(ctx context.Context, exec boil.ContextExecutor, hash string, selectCols ...string) (*RepositoryCommit, error) {
	repositoryCommitObj := &RepositoryCommit{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `repository_commits` where `hash`=?", sel,
	)

	q := queries.Raw(query, hash)

	err := q.Bind(ctx, exec, repositoryCommitObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from repository_commits")
	}

	if err = repositoryCommitObj.doAfterSelectHooks(ctx, exec); err != nil {
		return repositoryCommitObj, err
	}

	return repositoryCommitObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RepositoryCommit) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no repository_commits provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(repositoryCommitColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	repositoryCommitInsertCacheMut.RLock()
	cache, cached := repositoryCommitInsertCache[key]
	repositoryCommitInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			repositoryCommitAllColumns,
			repositoryCommitColumnsWithDefault,
			repositoryCommitColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(repositoryCommitType, repositoryCommitMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(repositoryCommitType, repositoryCommitMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `repository_commits` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `repository_commits` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `repository_commits` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, repositoryCommitPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into repository_commits")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Hash,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for repository_commits")
	}

CacheNoHooks:
	if !cached {
		repositoryCommitInsertCacheMut.Lock()
		repositoryCommitInsertCache[key] = cache
		repositoryCommitInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RepositoryCommit.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RepositoryCommit) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	repositoryCommitUpdateCacheMut.RLock()
	cache, cached := repositoryCommitUpdateCache[key]
	repositoryCommitUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			repositoryCommitAllColumns,
			repositoryCommitPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update repository_commits, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `repository_commits` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, repositoryCommitPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(repositoryCommitType, repositoryCommitMapping, append(wl, repositoryCommitPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update repository_commits row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for repository_commits")
	}

	if !cached {
		repositoryCommitUpdateCacheMut.Lock()
		repositoryCommitUpdateCache[key] = cache
		repositoryCommitUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q repositoryCommitQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for repository_commits")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for repository_commits")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RepositoryCommitSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), repositoryCommitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `repository_commits` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, repositoryCommitPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in repositoryCommit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all repositoryCommit")
	}
	return rowsAff, nil
}

var mySQLRepositoryCommitUniqueColumns = []string{
	"hash",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RepositoryCommit) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no repository_commits provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(repositoryCommitColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLRepositoryCommitUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	repositoryCommitUpsertCacheMut.RLock()
	cache, cached := repositoryCommitUpsertCache[key]
	repositoryCommitUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			repositoryCommitAllColumns,
			repositoryCommitColumnsWithDefault,
			repositoryCommitColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			repositoryCommitAllColumns,
			repositoryCommitPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert repository_commits, could not build update column list")
		}

		ret := strmangle.SetComplement(repositoryCommitAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`repository_commits`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `repository_commits` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(repositoryCommitType, repositoryCommitMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(repositoryCommitType, repositoryCommitMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for repository_commits")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(repositoryCommitType, repositoryCommitMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for repository_commits")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for repository_commits")
	}

CacheNoHooks:
	if !cached {
		repositoryCommitUpsertCacheMut.Lock()
		repositoryCommitUpsertCache[key] = cache
		repositoryCommitUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RepositoryCommit record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RepositoryCommit) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RepositoryCommit provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), repositoryCommitPrimaryKeyMapping)
	sql := "DELETE FROM `repository_commits` WHERE `hash`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from repository_commits")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for repository_commits")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q repositoryCommitQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no repositoryCommitQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from repository_commits")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for repository_commits")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RepositoryCommitSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(repositoryCommitBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), repositoryCommitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `repository_commits` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, repositoryCommitPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from repositoryCommit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for repository_commits")
	}

	if len(repositoryCommitAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RepositoryCommit) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRepositoryCommit(ctx, exec, o.Hash)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RepositoryCommitSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RepositoryCommitSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), repositoryCommitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `repository_commits`.* FROM `repository_commits` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, repositoryCommitPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RepositoryCommitSlice")
	}

	*o = slice

	return nil
}

// RepositoryCommitExists checks if the RepositoryCommit row exists.
func RepositoryCommitExists(ctx context.Context, exec boil.ContextExecutor, hash string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `repository_commits` where `hash`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, hash)
	}
	row := exec.QueryRowContext(ctx, sql, hash)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if repository_commits exists")
	}

	return exists, nil
}

// Exists checks if the RepositoryCommit row exists.
func (o *RepositoryCommit) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RepositoryCommitExists(ctx, exec, o.Hash)
}
