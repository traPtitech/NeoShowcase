// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"strconv"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/strmangle"
)

// M type is for providing columns and column values to UpdateAll.
type M map[string]interface{}

// ErrSyncFail occurs during insert when the record could not be retrieved in
// order to populate default value information. This usually happens when LastInsertId
// fails or there was a primary key configuration that was not resolvable.
var ErrSyncFail = errors.New("models: failed to synchronize data after insert")

type insertCache struct {
	query        string
	retQuery     string
	valueMapping []uint64
	retMapping   []uint64
}

type updateCache struct {
	query        string
	valueMapping []uint64
}

func makeCacheKey(cols boil.Columns, nzDefaults []string) string {
	buf := strmangle.GetBuffer()

	buf.WriteString(strconv.Itoa(cols.Kind))
	for _, w := range cols.Cols {
		buf.WriteString(w)
	}

	if len(nzDefaults) != 0 {
		buf.WriteByte('.')
	}
	for _, nz := range nzDefaults {
		buf.WriteString(nz)
	}

	str := buf.String()
	strmangle.PutBuffer(buf)
	return str
}

// Enum values for ApplicationConfigStartupBehavior
const (
	ApplicationConfigStartupBehaviorUndefined   string = "undefined"
	ApplicationConfigStartupBehaviorLoadingPage string = "loading-page"
	ApplicationConfigStartupBehaviorBlocking    string = "blocking"
)

func AllApplicationConfigStartupBehavior() []string {
	return []string{
		ApplicationConfigStartupBehaviorUndefined,
		ApplicationConfigStartupBehaviorLoadingPage,
		ApplicationConfigStartupBehaviorBlocking,
	}
}

// Enum values for ApplicationConfigBuildType
const (
	ApplicationConfigBuildTypeRuntimeBuildpack  string = "runtime-buildpack"
	ApplicationConfigBuildTypeRuntimeCMD        string = "runtime-cmd"
	ApplicationConfigBuildTypeRuntimeDockerfile string = "runtime-dockerfile"
	ApplicationConfigBuildTypeStaticBuildpack   string = "static-buildpack"
	ApplicationConfigBuildTypeStaticCMD         string = "static-cmd"
	ApplicationConfigBuildTypeStaticDockerfile  string = "static-dockerfile"
)

func AllApplicationConfigBuildType() []string {
	return []string{
		ApplicationConfigBuildTypeRuntimeBuildpack,
		ApplicationConfigBuildTypeRuntimeCMD,
		ApplicationConfigBuildTypeRuntimeDockerfile,
		ApplicationConfigBuildTypeStaticBuildpack,
		ApplicationConfigBuildTypeStaticCMD,
		ApplicationConfigBuildTypeStaticDockerfile,
	}
}

// Enum values for ApplicationsDeployType
const (
	ApplicationsDeployTypeRuntime string = "runtime"
	ApplicationsDeployTypeStatic  string = "static"
)

func AllApplicationsDeployType() []string {
	return []string{
		ApplicationsDeployTypeRuntime,
		ApplicationsDeployTypeStatic,
	}
}

// Enum values for ApplicationsContainer
const (
	ApplicationsContainerMissing    string = "missing"
	ApplicationsContainerStarting   string = "starting"
	ApplicationsContainerRestarting string = "restarting"
	ApplicationsContainerRunning    string = "running"
	ApplicationsContainerExited     string = "exited"
	ApplicationsContainerErrored    string = "errored"
	ApplicationsContainerUnknown    string = "unknown"
)

func AllApplicationsContainer() []string {
	return []string{
		ApplicationsContainerMissing,
		ApplicationsContainerStarting,
		ApplicationsContainerRestarting,
		ApplicationsContainerRunning,
		ApplicationsContainerExited,
		ApplicationsContainerErrored,
		ApplicationsContainerUnknown,
	}
}

// Enum values for BuildsStatus
const (
	BuildsStatusBuilding  string = "building"
	BuildsStatusSucceeded string = "succeeded"
	BuildsStatusFailed    string = "failed"
	BuildsStatusCanceled  string = "canceled"
	BuildsStatusQueued    string = "queued"
	BuildsStatusSkipped   string = "skipped"
)

func AllBuildsStatus() []string {
	return []string{
		BuildsStatusBuilding,
		BuildsStatusSucceeded,
		BuildsStatusFailed,
		BuildsStatusCanceled,
		BuildsStatusQueued,
		BuildsStatusSkipped,
	}
}

// Enum values for PortPublicationsProtocol
const (
	PortPublicationsProtocolTCP string = "tcp"
	PortPublicationsProtocolUDP string = "udp"
)

func AllPortPublicationsProtocol() []string {
	return []string{
		PortPublicationsProtocolTCP,
		PortPublicationsProtocolUDP,
	}
}

// Enum values for RepositoryAuthMethod
const (
	RepositoryAuthMethodBasic string = "basic"
	RepositoryAuthMethodSSH   string = "ssh"
)

func AllRepositoryAuthMethod() []string {
	return []string{
		RepositoryAuthMethodBasic,
		RepositoryAuthMethodSSH,
	}
}

// Enum values for WebsitesAuthentication
const (
	WebsitesAuthenticationOff  string = "off"
	WebsitesAuthenticationSoft string = "soft"
	WebsitesAuthenticationHard string = "hard"
)

func AllWebsitesAuthentication() []string {
	return []string{
		WebsitesAuthenticationOff,
		WebsitesAuthenticationSoft,
		WebsitesAuthenticationHard,
	}
}
