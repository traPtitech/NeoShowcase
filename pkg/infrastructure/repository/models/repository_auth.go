// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// RepositoryAuth is an object representing the database table.
type RepositoryAuth struct {
	// リポジトリID
	RepositoryID string `boil:"repository_id" json:"repository_id" toml:"repository_id" yaml:"repository_id"`
	// 認証方法
	Method string `boil:"method" json:"method" toml:"method" yaml:"method"`
	// (basic)ユーザー名
	Username string `boil:"username" json:"username" toml:"username" yaml:"username"`
	// (basic)パスワード
	Password string `boil:"password" json:"password" toml:"password" yaml:"password"`
	// (ssh)PEM encoded private key
	SSHKey string `boil:"ssh_key" json:"ssh_key" toml:"ssh_key" yaml:"ssh_key"`

	R *repositoryAuthR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L repositoryAuthL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RepositoryAuthColumns = struct {
	RepositoryID string
	Method       string
	Username     string
	Password     string
	SSHKey       string
}{
	RepositoryID: "repository_id",
	Method:       "method",
	Username:     "username",
	Password:     "password",
	SSHKey:       "ssh_key",
}

var RepositoryAuthTableColumns = struct {
	RepositoryID string
	Method       string
	Username     string
	Password     string
	SSHKey       string
}{
	RepositoryID: "repository_auth.repository_id",
	Method:       "repository_auth.method",
	Username:     "repository_auth.username",
	Password:     "repository_auth.password",
	SSHKey:       "repository_auth.ssh_key",
}

// Generated where

var RepositoryAuthWhere = struct {
	RepositoryID whereHelperstring
	Method       whereHelperstring
	Username     whereHelperstring
	Password     whereHelperstring
	SSHKey       whereHelperstring
}{
	RepositoryID: whereHelperstring{field: "`repository_auth`.`repository_id`"},
	Method:       whereHelperstring{field: "`repository_auth`.`method`"},
	Username:     whereHelperstring{field: "`repository_auth`.`username`"},
	Password:     whereHelperstring{field: "`repository_auth`.`password`"},
	SSHKey:       whereHelperstring{field: "`repository_auth`.`ssh_key`"},
}

// RepositoryAuthRels is where relationship names are stored.
var RepositoryAuthRels = struct {
	Repository string
}{
	Repository: "Repository",
}

// repositoryAuthR is where relationships are stored.
type repositoryAuthR struct {
	Repository *Repository `boil:"Repository" json:"Repository" toml:"Repository" yaml:"Repository"`
}

// NewStruct creates a new relationship struct
func (*repositoryAuthR) NewStruct() *repositoryAuthR {
	return &repositoryAuthR{}
}

func (o *RepositoryAuth) GetRepository() *Repository {
	if o == nil {
		return nil
	}

	return o.R.GetRepository()
}

func (r *repositoryAuthR) GetRepository() *Repository {
	if r == nil {
		return nil
	}

	return r.Repository
}

// repositoryAuthL is where Load methods for each relationship are stored.
type repositoryAuthL struct{}

var (
	repositoryAuthAllColumns            = []string{"repository_id", "method", "username", "password", "ssh_key"}
	repositoryAuthColumnsWithoutDefault = []string{"repository_id", "method", "username", "password", "ssh_key"}
	repositoryAuthColumnsWithDefault    = []string{}
	repositoryAuthPrimaryKeyColumns     = []string{"repository_id"}
	repositoryAuthGeneratedColumns      = []string{}
)

type (
	// RepositoryAuthSlice is an alias for a slice of pointers to RepositoryAuth.
	// This should almost always be used instead of []RepositoryAuth.
	RepositoryAuthSlice []*RepositoryAuth
	// RepositoryAuthHook is the signature for custom RepositoryAuth hook methods
	RepositoryAuthHook func(context.Context, boil.ContextExecutor, *RepositoryAuth) error

	repositoryAuthQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	repositoryAuthType                 = reflect.TypeOf(&RepositoryAuth{})
	repositoryAuthMapping              = queries.MakeStructMapping(repositoryAuthType)
	repositoryAuthPrimaryKeyMapping, _ = queries.BindMapping(repositoryAuthType, repositoryAuthMapping, repositoryAuthPrimaryKeyColumns)
	repositoryAuthInsertCacheMut       sync.RWMutex
	repositoryAuthInsertCache          = make(map[string]insertCache)
	repositoryAuthUpdateCacheMut       sync.RWMutex
	repositoryAuthUpdateCache          = make(map[string]updateCache)
	repositoryAuthUpsertCacheMut       sync.RWMutex
	repositoryAuthUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var repositoryAuthAfterSelectMu sync.Mutex
var repositoryAuthAfterSelectHooks []RepositoryAuthHook

var repositoryAuthBeforeInsertMu sync.Mutex
var repositoryAuthBeforeInsertHooks []RepositoryAuthHook
var repositoryAuthAfterInsertMu sync.Mutex
var repositoryAuthAfterInsertHooks []RepositoryAuthHook

var repositoryAuthBeforeUpdateMu sync.Mutex
var repositoryAuthBeforeUpdateHooks []RepositoryAuthHook
var repositoryAuthAfterUpdateMu sync.Mutex
var repositoryAuthAfterUpdateHooks []RepositoryAuthHook

var repositoryAuthBeforeDeleteMu sync.Mutex
var repositoryAuthBeforeDeleteHooks []RepositoryAuthHook
var repositoryAuthAfterDeleteMu sync.Mutex
var repositoryAuthAfterDeleteHooks []RepositoryAuthHook

var repositoryAuthBeforeUpsertMu sync.Mutex
var repositoryAuthBeforeUpsertHooks []RepositoryAuthHook
var repositoryAuthAfterUpsertMu sync.Mutex
var repositoryAuthAfterUpsertHooks []RepositoryAuthHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RepositoryAuth) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range repositoryAuthAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RepositoryAuth) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range repositoryAuthBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RepositoryAuth) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range repositoryAuthAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RepositoryAuth) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range repositoryAuthBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RepositoryAuth) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range repositoryAuthAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RepositoryAuth) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range repositoryAuthBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RepositoryAuth) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range repositoryAuthAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RepositoryAuth) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range repositoryAuthBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RepositoryAuth) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range repositoryAuthAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRepositoryAuthHook registers your hook function for all future operations.
func AddRepositoryAuthHook(hookPoint boil.HookPoint, repositoryAuthHook RepositoryAuthHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		repositoryAuthAfterSelectMu.Lock()
		repositoryAuthAfterSelectHooks = append(repositoryAuthAfterSelectHooks, repositoryAuthHook)
		repositoryAuthAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		repositoryAuthBeforeInsertMu.Lock()
		repositoryAuthBeforeInsertHooks = append(repositoryAuthBeforeInsertHooks, repositoryAuthHook)
		repositoryAuthBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		repositoryAuthAfterInsertMu.Lock()
		repositoryAuthAfterInsertHooks = append(repositoryAuthAfterInsertHooks, repositoryAuthHook)
		repositoryAuthAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		repositoryAuthBeforeUpdateMu.Lock()
		repositoryAuthBeforeUpdateHooks = append(repositoryAuthBeforeUpdateHooks, repositoryAuthHook)
		repositoryAuthBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		repositoryAuthAfterUpdateMu.Lock()
		repositoryAuthAfterUpdateHooks = append(repositoryAuthAfterUpdateHooks, repositoryAuthHook)
		repositoryAuthAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		repositoryAuthBeforeDeleteMu.Lock()
		repositoryAuthBeforeDeleteHooks = append(repositoryAuthBeforeDeleteHooks, repositoryAuthHook)
		repositoryAuthBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		repositoryAuthAfterDeleteMu.Lock()
		repositoryAuthAfterDeleteHooks = append(repositoryAuthAfterDeleteHooks, repositoryAuthHook)
		repositoryAuthAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		repositoryAuthBeforeUpsertMu.Lock()
		repositoryAuthBeforeUpsertHooks = append(repositoryAuthBeforeUpsertHooks, repositoryAuthHook)
		repositoryAuthBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		repositoryAuthAfterUpsertMu.Lock()
		repositoryAuthAfterUpsertHooks = append(repositoryAuthAfterUpsertHooks, repositoryAuthHook)
		repositoryAuthAfterUpsertMu.Unlock()
	}
}

// One returns a single repositoryAuth record from the query.
func (q repositoryAuthQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RepositoryAuth, error) {
	o := &RepositoryAuth{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for repository_auth")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RepositoryAuth records from the query.
func (q repositoryAuthQuery) All(ctx context.Context, exec boil.ContextExecutor) (RepositoryAuthSlice, error) {
	var o []*RepositoryAuth

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RepositoryAuth slice")
	}

	if len(repositoryAuthAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RepositoryAuth records in the query.
func (q repositoryAuthQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count repository_auth rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q repositoryAuthQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if repository_auth exists")
	}

	return count > 0, nil
}

// Repository pointed to by the foreign key.
func (o *RepositoryAuth) Repository(mods ...qm.QueryMod) repositoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.RepositoryID),
	}

	queryMods = append(queryMods, mods...)

	return Repositories(queryMods...)
}

// LoadRepository allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (repositoryAuthL) LoadRepository(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRepositoryAuth interface{}, mods queries.Applicator) error {
	var slice []*RepositoryAuth
	var object *RepositoryAuth

	if singular {
		var ok bool
		object, ok = maybeRepositoryAuth.(*RepositoryAuth)
		if !ok {
			object = new(RepositoryAuth)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRepositoryAuth)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRepositoryAuth))
			}
		}
	} else {
		s, ok := maybeRepositoryAuth.(*[]*RepositoryAuth)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRepositoryAuth)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRepositoryAuth))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &repositoryAuthR{}
		}
		args[object.RepositoryID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &repositoryAuthR{}
			}

			args[obj.RepositoryID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`repositories`),
		qm.WhereIn(`repositories.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Repository")
	}

	var resultSlice []*Repository
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Repository")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for repositories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for repositories")
	}

	if len(repositoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Repository = foreign
		if foreign.R == nil {
			foreign.R = &repositoryR{}
		}
		foreign.R.RepositoryAuth = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RepositoryID == foreign.ID {
				local.R.Repository = foreign
				if foreign.R == nil {
					foreign.R = &repositoryR{}
				}
				foreign.R.RepositoryAuth = local
				break
			}
		}
	}

	return nil
}

// SetRepository of the repositoryAuth to the related item.
// Sets o.R.Repository to related.
// Adds o to related.R.RepositoryAuth.
func (o *RepositoryAuth) SetRepository(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Repository) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `repository_auth` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"repository_id"}),
		strmangle.WhereClause("`", "`", 0, repositoryAuthPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.RepositoryID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RepositoryID = related.ID
	if o.R == nil {
		o.R = &repositoryAuthR{
			Repository: related,
		}
	} else {
		o.R.Repository = related
	}

	if related.R == nil {
		related.R = &repositoryR{
			RepositoryAuth: o,
		}
	} else {
		related.R.RepositoryAuth = o
	}

	return nil
}

// RepositoryAuths retrieves all the records using an executor.
func RepositoryAuths(mods ...qm.QueryMod) repositoryAuthQuery {
	mods = append(mods, qm.From("`repository_auth`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`repository_auth`.*"})
	}

	return repositoryAuthQuery{q}
}

// FindRepositoryAuth retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRepositoryAuth(ctx context.Context, exec boil.ContextExecutor, repositoryID string, selectCols ...string) (*RepositoryAuth, error) {
	repositoryAuthObj := &RepositoryAuth{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `repository_auth` where `repository_id`=?", sel,
	)

	q := queries.Raw(query, repositoryID)

	err := q.Bind(ctx, exec, repositoryAuthObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from repository_auth")
	}

	if err = repositoryAuthObj.doAfterSelectHooks(ctx, exec); err != nil {
		return repositoryAuthObj, err
	}

	return repositoryAuthObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RepositoryAuth) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no repository_auth provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(repositoryAuthColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	repositoryAuthInsertCacheMut.RLock()
	cache, cached := repositoryAuthInsertCache[key]
	repositoryAuthInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			repositoryAuthAllColumns,
			repositoryAuthColumnsWithDefault,
			repositoryAuthColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(repositoryAuthType, repositoryAuthMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(repositoryAuthType, repositoryAuthMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `repository_auth` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `repository_auth` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `repository_auth` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, repositoryAuthPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into repository_auth")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.RepositoryID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for repository_auth")
	}

CacheNoHooks:
	if !cached {
		repositoryAuthInsertCacheMut.Lock()
		repositoryAuthInsertCache[key] = cache
		repositoryAuthInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RepositoryAuth.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RepositoryAuth) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	repositoryAuthUpdateCacheMut.RLock()
	cache, cached := repositoryAuthUpdateCache[key]
	repositoryAuthUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			repositoryAuthAllColumns,
			repositoryAuthPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update repository_auth, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `repository_auth` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, repositoryAuthPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(repositoryAuthType, repositoryAuthMapping, append(wl, repositoryAuthPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update repository_auth row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for repository_auth")
	}

	if !cached {
		repositoryAuthUpdateCacheMut.Lock()
		repositoryAuthUpdateCache[key] = cache
		repositoryAuthUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q repositoryAuthQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for repository_auth")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for repository_auth")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RepositoryAuthSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), repositoryAuthPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `repository_auth` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, repositoryAuthPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in repositoryAuth slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all repositoryAuth")
	}
	return rowsAff, nil
}

var mySQLRepositoryAuthUniqueColumns = []string{
	"repository_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RepositoryAuth) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no repository_auth provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(repositoryAuthColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLRepositoryAuthUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	repositoryAuthUpsertCacheMut.RLock()
	cache, cached := repositoryAuthUpsertCache[key]
	repositoryAuthUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			repositoryAuthAllColumns,
			repositoryAuthColumnsWithDefault,
			repositoryAuthColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			repositoryAuthAllColumns,
			repositoryAuthPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert repository_auth, could not build update column list")
		}

		ret := strmangle.SetComplement(repositoryAuthAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`repository_auth`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `repository_auth` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(repositoryAuthType, repositoryAuthMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(repositoryAuthType, repositoryAuthMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for repository_auth")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(repositoryAuthType, repositoryAuthMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for repository_auth")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for repository_auth")
	}

CacheNoHooks:
	if !cached {
		repositoryAuthUpsertCacheMut.Lock()
		repositoryAuthUpsertCache[key] = cache
		repositoryAuthUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RepositoryAuth record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RepositoryAuth) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RepositoryAuth provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), repositoryAuthPrimaryKeyMapping)
	sql := "DELETE FROM `repository_auth` WHERE `repository_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from repository_auth")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for repository_auth")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q repositoryAuthQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no repositoryAuthQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from repository_auth")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for repository_auth")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RepositoryAuthSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(repositoryAuthBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), repositoryAuthPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `repository_auth` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, repositoryAuthPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from repositoryAuth slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for repository_auth")
	}

	if len(repositoryAuthAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RepositoryAuth) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRepositoryAuth(ctx, exec, o.RepositoryID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RepositoryAuthSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RepositoryAuthSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), repositoryAuthPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `repository_auth`.* FROM `repository_auth` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, repositoryAuthPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RepositoryAuthSlice")
	}

	*o = slice

	return nil
}

// RepositoryAuthExists checks if the RepositoryAuth row exists.
func RepositoryAuthExists(ctx context.Context, exec boil.ContextExecutor, repositoryID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `repository_auth` where `repository_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, repositoryID)
	}
	row := exec.QueryRowContext(ctx, sql, repositoryID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if repository_auth exists")
	}

	return exists, nil
}

// Exists checks if the RepositoryAuth row exists.
func (o *RepositoryAuth) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RepositoryAuthExists(ctx, exec, o.RepositoryID)
}
