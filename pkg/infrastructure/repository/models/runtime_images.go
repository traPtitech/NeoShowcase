// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RuntimeImage is an object representing the database table.
type RuntimeImage struct { // ビルドID
	BuildID string `boil:"build_id" json:"build_id" toml:"build_id" yaml:"build_id"`
	// イメージサイズ
	Size int64 `boil:"size" json:"size" toml:"size" yaml:"size"`
	// 作成日時
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *runtimeImageR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L runtimeImageL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RuntimeImageColumns = struct {
	BuildID   string
	Size      string
	CreatedAt string
}{
	BuildID:   "build_id",
	Size:      "size",
	CreatedAt: "created_at",
}

var RuntimeImageTableColumns = struct {
	BuildID   string
	Size      string
	CreatedAt string
}{
	BuildID:   "runtime_images.build_id",
	Size:      "runtime_images.size",
	CreatedAt: "runtime_images.created_at",
}

// Generated where

var RuntimeImageWhere = struct {
	BuildID   whereHelperstring
	Size      whereHelperint64
	CreatedAt whereHelpertime_Time
}{
	BuildID:   whereHelperstring{field: "`runtime_images`.`build_id`"},
	Size:      whereHelperint64{field: "`runtime_images`.`size`"},
	CreatedAt: whereHelpertime_Time{field: "`runtime_images`.`created_at`"},
}

// RuntimeImageRels is where relationship names are stored.
var RuntimeImageRels = struct {
	Build string
}{
	Build: "Build",
}

// runtimeImageR is where relationships are stored.
type runtimeImageR struct {
	Build *Build `boil:"Build" json:"Build" toml:"Build" yaml:"Build"`
}

// NewStruct creates a new relationship struct
func (*runtimeImageR) NewStruct() *runtimeImageR {
	return &runtimeImageR{}
}

func (r *runtimeImageR) GetBuild() *Build {
	if r == nil {
		return nil
	}
	return r.Build
}

// runtimeImageL is where Load methods for each relationship are stored.
type runtimeImageL struct{}

var (
	runtimeImageAllColumns            = []string{"build_id", "size", "created_at"}
	runtimeImageColumnsWithoutDefault = []string{"build_id", "size", "created_at"}
	runtimeImageColumnsWithDefault    = []string{}
	runtimeImagePrimaryKeyColumns     = []string{"build_id"}
	runtimeImageGeneratedColumns      = []string{}
)

type (
	// RuntimeImageSlice is an alias for a slice of pointers to RuntimeImage.
	// This should almost always be used instead of []RuntimeImage.
	RuntimeImageSlice []*RuntimeImage
	// RuntimeImageHook is the signature for custom RuntimeImage hook methods
	RuntimeImageHook func(context.Context, boil.ContextExecutor, *RuntimeImage) error

	runtimeImageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	runtimeImageType                 = reflect.TypeOf(&RuntimeImage{})
	runtimeImageMapping              = queries.MakeStructMapping(runtimeImageType)
	runtimeImagePrimaryKeyMapping, _ = queries.BindMapping(runtimeImageType, runtimeImageMapping, runtimeImagePrimaryKeyColumns)
	runtimeImageInsertCacheMut       sync.RWMutex
	runtimeImageInsertCache          = make(map[string]insertCache)
	runtimeImageUpdateCacheMut       sync.RWMutex
	runtimeImageUpdateCache          = make(map[string]updateCache)
	runtimeImageUpsertCacheMut       sync.RWMutex
	runtimeImageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var runtimeImageAfterSelectMu sync.Mutex
var runtimeImageAfterSelectHooks []RuntimeImageHook

var runtimeImageBeforeInsertMu sync.Mutex
var runtimeImageBeforeInsertHooks []RuntimeImageHook
var runtimeImageAfterInsertMu sync.Mutex
var runtimeImageAfterInsertHooks []RuntimeImageHook

var runtimeImageBeforeUpdateMu sync.Mutex
var runtimeImageBeforeUpdateHooks []RuntimeImageHook
var runtimeImageAfterUpdateMu sync.Mutex
var runtimeImageAfterUpdateHooks []RuntimeImageHook

var runtimeImageBeforeDeleteMu sync.Mutex
var runtimeImageBeforeDeleteHooks []RuntimeImageHook
var runtimeImageAfterDeleteMu sync.Mutex
var runtimeImageAfterDeleteHooks []RuntimeImageHook

var runtimeImageBeforeUpsertMu sync.Mutex
var runtimeImageBeforeUpsertHooks []RuntimeImageHook
var runtimeImageAfterUpsertMu sync.Mutex
var runtimeImageAfterUpsertHooks []RuntimeImageHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RuntimeImage) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range runtimeImageAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RuntimeImage) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range runtimeImageBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RuntimeImage) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range runtimeImageAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RuntimeImage) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range runtimeImageBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RuntimeImage) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range runtimeImageAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RuntimeImage) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range runtimeImageBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RuntimeImage) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range runtimeImageAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RuntimeImage) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range runtimeImageBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RuntimeImage) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range runtimeImageAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRuntimeImageHook registers your hook function for all future operations.
func AddRuntimeImageHook(hookPoint boil.HookPoint, runtimeImageHook RuntimeImageHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		runtimeImageAfterSelectMu.Lock()
		runtimeImageAfterSelectHooks = append(runtimeImageAfterSelectHooks, runtimeImageHook)
		runtimeImageAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		runtimeImageBeforeInsertMu.Lock()
		runtimeImageBeforeInsertHooks = append(runtimeImageBeforeInsertHooks, runtimeImageHook)
		runtimeImageBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		runtimeImageAfterInsertMu.Lock()
		runtimeImageAfterInsertHooks = append(runtimeImageAfterInsertHooks, runtimeImageHook)
		runtimeImageAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		runtimeImageBeforeUpdateMu.Lock()
		runtimeImageBeforeUpdateHooks = append(runtimeImageBeforeUpdateHooks, runtimeImageHook)
		runtimeImageBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		runtimeImageAfterUpdateMu.Lock()
		runtimeImageAfterUpdateHooks = append(runtimeImageAfterUpdateHooks, runtimeImageHook)
		runtimeImageAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		runtimeImageBeforeDeleteMu.Lock()
		runtimeImageBeforeDeleteHooks = append(runtimeImageBeforeDeleteHooks, runtimeImageHook)
		runtimeImageBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		runtimeImageAfterDeleteMu.Lock()
		runtimeImageAfterDeleteHooks = append(runtimeImageAfterDeleteHooks, runtimeImageHook)
		runtimeImageAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		runtimeImageBeforeUpsertMu.Lock()
		runtimeImageBeforeUpsertHooks = append(runtimeImageBeforeUpsertHooks, runtimeImageHook)
		runtimeImageBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		runtimeImageAfterUpsertMu.Lock()
		runtimeImageAfterUpsertHooks = append(runtimeImageAfterUpsertHooks, runtimeImageHook)
		runtimeImageAfterUpsertMu.Unlock()
	}
}

// One returns a single runtimeImage record from the query.
func (q runtimeImageQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RuntimeImage, error) {
	o := &RuntimeImage{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for runtime_images")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RuntimeImage records from the query.
func (q runtimeImageQuery) All(ctx context.Context, exec boil.ContextExecutor) (RuntimeImageSlice, error) {
	var o []*RuntimeImage

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RuntimeImage slice")
	}

	if len(runtimeImageAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RuntimeImage records in the query.
func (q runtimeImageQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count runtime_images rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q runtimeImageQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if runtime_images exists")
	}

	return count > 0, nil
}

// Build pointed to by the foreign key.
func (o *RuntimeImage) Build(mods ...qm.QueryMod) buildQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.BuildID),
	}

	queryMods = append(queryMods, mods...)

	return Builds(queryMods...)
}

// LoadBuild allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (runtimeImageL) LoadBuild(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRuntimeImage interface{}, mods queries.Applicator) error {
	var slice []*RuntimeImage
	var object *RuntimeImage

	if singular {
		var ok bool
		object, ok = maybeRuntimeImage.(*RuntimeImage)
		if !ok {
			object = new(RuntimeImage)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRuntimeImage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRuntimeImage))
			}
		}
	} else {
		s, ok := maybeRuntimeImage.(*[]*RuntimeImage)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRuntimeImage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRuntimeImage))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &runtimeImageR{}
		}
		args[object.BuildID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &runtimeImageR{}
			}

			args[obj.BuildID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`builds`),
		qm.WhereIn(`builds.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Build")
	}

	var resultSlice []*Build
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Build")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for builds")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for builds")
	}

	if len(buildAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Build = foreign
		if foreign.R == nil {
			foreign.R = &buildR{}
		}
		foreign.R.RuntimeImage = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BuildID == foreign.ID {
				local.R.Build = foreign
				if foreign.R == nil {
					foreign.R = &buildR{}
				}
				foreign.R.RuntimeImage = local
				break
			}
		}
	}

	return nil
}

// SetBuild of the runtimeImage to the related item.
// Sets o.R.Build to related.
// Adds o to related.R.RuntimeImage.
func (o *RuntimeImage) SetBuild(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Build) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `runtime_images` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"build_id"}),
		strmangle.WhereClause("`", "`", 0, runtimeImagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.BuildID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BuildID = related.ID
	if o.R == nil {
		o.R = &runtimeImageR{
			Build: related,
		}
	} else {
		o.R.Build = related
	}

	if related.R == nil {
		related.R = &buildR{
			RuntimeImage: o,
		}
	} else {
		related.R.RuntimeImage = o
	}

	return nil
}

// RuntimeImages retrieves all the records using an executor.
func RuntimeImages(mods ...qm.QueryMod) runtimeImageQuery {
	mods = append(mods, qm.From("`runtime_images`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`runtime_images`.*"})
	}

	return runtimeImageQuery{q}
}

// FindRuntimeImage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRuntimeImage(ctx context.Context, exec boil.ContextExecutor, buildID string, selectCols ...string) (*RuntimeImage, error) {
	runtimeImageObj := &RuntimeImage{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `runtime_images` where `build_id`=?", sel,
	)

	q := queries.Raw(query, buildID)

	err := q.Bind(ctx, exec, runtimeImageObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from runtime_images")
	}

	if err = runtimeImageObj.doAfterSelectHooks(ctx, exec); err != nil {
		return runtimeImageObj, err
	}

	return runtimeImageObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RuntimeImage) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no runtime_images provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(runtimeImageColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	runtimeImageInsertCacheMut.RLock()
	cache, cached := runtimeImageInsertCache[key]
	runtimeImageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			runtimeImageAllColumns,
			runtimeImageColumnsWithDefault,
			runtimeImageColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(runtimeImageType, runtimeImageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(runtimeImageType, runtimeImageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `runtime_images` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `runtime_images` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `runtime_images` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, runtimeImagePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into runtime_images")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BuildID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for runtime_images")
	}

CacheNoHooks:
	if !cached {
		runtimeImageInsertCacheMut.Lock()
		runtimeImageInsertCache[key] = cache
		runtimeImageInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RuntimeImage.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RuntimeImage) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	runtimeImageUpdateCacheMut.RLock()
	cache, cached := runtimeImageUpdateCache[key]
	runtimeImageUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			runtimeImageAllColumns,
			runtimeImagePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update runtime_images, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `runtime_images` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, runtimeImagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(runtimeImageType, runtimeImageMapping, append(wl, runtimeImagePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update runtime_images row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for runtime_images")
	}

	if !cached {
		runtimeImageUpdateCacheMut.Lock()
		runtimeImageUpdateCache[key] = cache
		runtimeImageUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q runtimeImageQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for runtime_images")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for runtime_images")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RuntimeImageSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), runtimeImagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `runtime_images` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, runtimeImagePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in runtimeImage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all runtimeImage")
	}
	return rowsAff, nil
}

var mySQLRuntimeImageUniqueColumns = []string{
	"build_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RuntimeImage) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no runtime_images provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(runtimeImageColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLRuntimeImageUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	runtimeImageUpsertCacheMut.RLock()
	cache, cached := runtimeImageUpsertCache[key]
	runtimeImageUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			runtimeImageAllColumns,
			runtimeImageColumnsWithDefault,
			runtimeImageColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			runtimeImageAllColumns,
			runtimeImagePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert runtime_images, could not build update column list")
		}

		ret := strmangle.SetComplement(runtimeImageAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`runtime_images`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `runtime_images` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(runtimeImageType, runtimeImageMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(runtimeImageType, runtimeImageMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for runtime_images")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(runtimeImageType, runtimeImageMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for runtime_images")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for runtime_images")
	}

CacheNoHooks:
	if !cached {
		runtimeImageUpsertCacheMut.Lock()
		runtimeImageUpsertCache[key] = cache
		runtimeImageUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RuntimeImage record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RuntimeImage) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RuntimeImage provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), runtimeImagePrimaryKeyMapping)
	sql := "DELETE FROM `runtime_images` WHERE `build_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from runtime_images")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for runtime_images")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q runtimeImageQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no runtimeImageQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from runtime_images")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for runtime_images")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RuntimeImageSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(runtimeImageBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), runtimeImagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `runtime_images` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, runtimeImagePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from runtimeImage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for runtime_images")
	}

	if len(runtimeImageAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RuntimeImage) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRuntimeImage(ctx, exec, o.BuildID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RuntimeImageSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RuntimeImageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), runtimeImagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `runtime_images`.* FROM `runtime_images` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, runtimeImagePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RuntimeImageSlice")
	}

	*o = slice

	return nil
}

// RuntimeImageExists checks if the RuntimeImage row exists.
func RuntimeImageExists(ctx context.Context, exec boil.ContextExecutor, buildID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `runtime_images` where `build_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, buildID)
	}
	row := exec.QueryRowContext(ctx, sql, buildID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if runtime_images exists")
	}

	return exists, nil
}

// Exists checks if the RuntimeImage row exists.
func (o *RuntimeImage) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RuntimeImageExists(ctx, exec, o.BuildID)
}
