// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Repository is an object representing the database table.
type Repository struct { // リポジトリID
	ID string `boil:"id" json:"id" toml:"id" yaml:"id"`
	// リポジトリ名
	Name string `boil:"name" json:"name" toml:"name" yaml:"name"`
	// Git Remote URL
	URL string `boil:"url" json:"url" toml:"url" yaml:"url"`

	R *repositoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L repositoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RepositoryColumns = struct {
	ID   string
	Name string
	URL  string
}{
	ID:   "id",
	Name: "name",
	URL:  "url",
}

var RepositoryTableColumns = struct {
	ID   string
	Name string
	URL  string
}{
	ID:   "repositories.id",
	Name: "repositories.name",
	URL:  "repositories.url",
}

// Generated where

var RepositoryWhere = struct {
	ID   whereHelperstring
	Name whereHelperstring
	URL  whereHelperstring
}{
	ID:   whereHelperstring{field: "`repositories`.`id`"},
	Name: whereHelperstring{field: "`repositories`.`name`"},
	URL:  whereHelperstring{field: "`repositories`.`url`"},
}

// RepositoryRels is where relationship names are stored.
var RepositoryRels = struct {
	RepositoryAuth string
	Applications   string
	Users          string
}{
	RepositoryAuth: "RepositoryAuth",
	Applications:   "Applications",
	Users:          "Users",
}

// repositoryR is where relationships are stored.
type repositoryR struct {
	RepositoryAuth *RepositoryAuth  `boil:"RepositoryAuth" json:"RepositoryAuth" toml:"RepositoryAuth" yaml:"RepositoryAuth"`
	Applications   ApplicationSlice `boil:"Applications" json:"Applications" toml:"Applications" yaml:"Applications"`
	Users          UserSlice        `boil:"Users" json:"Users" toml:"Users" yaml:"Users"`
}

// NewStruct creates a new relationship struct
func (*repositoryR) NewStruct() *repositoryR {
	return &repositoryR{}
}

func (r *repositoryR) GetRepositoryAuth() *RepositoryAuth {
	if r == nil {
		return nil
	}
	return r.RepositoryAuth
}

func (r *repositoryR) GetApplications() ApplicationSlice {
	if r == nil {
		return nil
	}
	return r.Applications
}

func (r *repositoryR) GetUsers() UserSlice {
	if r == nil {
		return nil
	}
	return r.Users
}

// repositoryL is where Load methods for each relationship are stored.
type repositoryL struct{}

var (
	repositoryAllColumns            = []string{"id", "name", "url"}
	repositoryColumnsWithoutDefault = []string{"id", "name", "url"}
	repositoryColumnsWithDefault    = []string{}
	repositoryPrimaryKeyColumns     = []string{"id"}
	repositoryGeneratedColumns      = []string{}
)

type (
	// RepositorySlice is an alias for a slice of pointers to Repository.
	// This should almost always be used instead of []Repository.
	RepositorySlice []*Repository
	// RepositoryHook is the signature for custom Repository hook methods
	RepositoryHook func(context.Context, boil.ContextExecutor, *Repository) error

	repositoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	repositoryType                 = reflect.TypeOf(&Repository{})
	repositoryMapping              = queries.MakeStructMapping(repositoryType)
	repositoryPrimaryKeyMapping, _ = queries.BindMapping(repositoryType, repositoryMapping, repositoryPrimaryKeyColumns)
	repositoryInsertCacheMut       sync.RWMutex
	repositoryInsertCache          = make(map[string]insertCache)
	repositoryUpdateCacheMut       sync.RWMutex
	repositoryUpdateCache          = make(map[string]updateCache)
	repositoryUpsertCacheMut       sync.RWMutex
	repositoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var repositoryAfterSelectMu sync.Mutex
var repositoryAfterSelectHooks []RepositoryHook

var repositoryBeforeInsertMu sync.Mutex
var repositoryBeforeInsertHooks []RepositoryHook
var repositoryAfterInsertMu sync.Mutex
var repositoryAfterInsertHooks []RepositoryHook

var repositoryBeforeUpdateMu sync.Mutex
var repositoryBeforeUpdateHooks []RepositoryHook
var repositoryAfterUpdateMu sync.Mutex
var repositoryAfterUpdateHooks []RepositoryHook

var repositoryBeforeDeleteMu sync.Mutex
var repositoryBeforeDeleteHooks []RepositoryHook
var repositoryAfterDeleteMu sync.Mutex
var repositoryAfterDeleteHooks []RepositoryHook

var repositoryBeforeUpsertMu sync.Mutex
var repositoryBeforeUpsertHooks []RepositoryHook
var repositoryAfterUpsertMu sync.Mutex
var repositoryAfterUpsertHooks []RepositoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Repository) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range repositoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Repository) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range repositoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Repository) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range repositoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Repository) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range repositoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Repository) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range repositoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Repository) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range repositoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Repository) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range repositoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Repository) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range repositoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Repository) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range repositoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRepositoryHook registers your hook function for all future operations.
func AddRepositoryHook(hookPoint boil.HookPoint, repositoryHook RepositoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		repositoryAfterSelectMu.Lock()
		repositoryAfterSelectHooks = append(repositoryAfterSelectHooks, repositoryHook)
		repositoryAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		repositoryBeforeInsertMu.Lock()
		repositoryBeforeInsertHooks = append(repositoryBeforeInsertHooks, repositoryHook)
		repositoryBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		repositoryAfterInsertMu.Lock()
		repositoryAfterInsertHooks = append(repositoryAfterInsertHooks, repositoryHook)
		repositoryAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		repositoryBeforeUpdateMu.Lock()
		repositoryBeforeUpdateHooks = append(repositoryBeforeUpdateHooks, repositoryHook)
		repositoryBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		repositoryAfterUpdateMu.Lock()
		repositoryAfterUpdateHooks = append(repositoryAfterUpdateHooks, repositoryHook)
		repositoryAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		repositoryBeforeDeleteMu.Lock()
		repositoryBeforeDeleteHooks = append(repositoryBeforeDeleteHooks, repositoryHook)
		repositoryBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		repositoryAfterDeleteMu.Lock()
		repositoryAfterDeleteHooks = append(repositoryAfterDeleteHooks, repositoryHook)
		repositoryAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		repositoryBeforeUpsertMu.Lock()
		repositoryBeforeUpsertHooks = append(repositoryBeforeUpsertHooks, repositoryHook)
		repositoryBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		repositoryAfterUpsertMu.Lock()
		repositoryAfterUpsertHooks = append(repositoryAfterUpsertHooks, repositoryHook)
		repositoryAfterUpsertMu.Unlock()
	}
}

// One returns a single repository record from the query.
func (q repositoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Repository, error) {
	o := &Repository{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for repositories")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Repository records from the query.
func (q repositoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (RepositorySlice, error) {
	var o []*Repository

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Repository slice")
	}

	if len(repositoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Repository records in the query.
func (q repositoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count repositories rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q repositoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if repositories exists")
	}

	return count > 0, nil
}

// RepositoryAuth pointed to by the foreign key.
func (o *Repository) RepositoryAuth(mods ...qm.QueryMod) repositoryAuthQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`repository_id` = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return RepositoryAuths(queryMods...)
}

// Applications retrieves all the application's Applications with an executor.
func (o *Repository) Applications(mods ...qm.QueryMod) applicationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`applications`.`repository_id`=?", o.ID),
	)

	return Applications(queryMods...)
}

// Users retrieves all the user's Users with an executor.
func (o *Repository) Users(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("`repository_owners` on `users`.`id` = `repository_owners`.`user_id`"),
		qm.Where("`repository_owners`.`repository_id`=?", o.ID),
	)

	return Users(queryMods...)
}

// LoadRepositoryAuth allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (repositoryL) LoadRepositoryAuth(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRepository interface{}, mods queries.Applicator) error {
	var slice []*Repository
	var object *Repository

	if singular {
		var ok bool
		object, ok = maybeRepository.(*Repository)
		if !ok {
			object = new(Repository)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRepository)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRepository))
			}
		}
	} else {
		s, ok := maybeRepository.(*[]*Repository)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRepository)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRepository))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &repositoryR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &repositoryR{}
			}

			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`repository_auth`),
		qm.WhereIn(`repository_auth.repository_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load RepositoryAuth")
	}

	var resultSlice []*RepositoryAuth
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice RepositoryAuth")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for repository_auth")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for repository_auth")
	}

	if len(repositoryAuthAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.RepositoryAuth = foreign
		if foreign.R == nil {
			foreign.R = &repositoryAuthR{}
		}
		foreign.R.Repository = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.RepositoryID {
				local.R.RepositoryAuth = foreign
				if foreign.R == nil {
					foreign.R = &repositoryAuthR{}
				}
				foreign.R.Repository = local
				break
			}
		}
	}

	return nil
}

// LoadApplications allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (repositoryL) LoadApplications(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRepository interface{}, mods queries.Applicator) error {
	var slice []*Repository
	var object *Repository

	if singular {
		var ok bool
		object, ok = maybeRepository.(*Repository)
		if !ok {
			object = new(Repository)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRepository)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRepository))
			}
		}
	} else {
		s, ok := maybeRepository.(*[]*Repository)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRepository)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRepository))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &repositoryR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &repositoryR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`applications`),
		qm.WhereIn(`applications.repository_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load applications")
	}

	var resultSlice []*Application
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice applications")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on applications")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for applications")
	}

	if len(applicationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Applications = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &applicationR{}
			}
			foreign.R.Repository = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RepositoryID {
				local.R.Applications = append(local.R.Applications, foreign)
				if foreign.R == nil {
					foreign.R = &applicationR{}
				}
				foreign.R.Repository = local
				break
			}
		}
	}

	return nil
}

// LoadUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (repositoryL) LoadUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRepository interface{}, mods queries.Applicator) error {
	var slice []*Repository
	var object *Repository

	if singular {
		var ok bool
		object, ok = maybeRepository.(*Repository)
		if !ok {
			object = new(Repository)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRepository)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRepository))
			}
		}
	} else {
		s, ok := maybeRepository.(*[]*Repository)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRepository)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRepository))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &repositoryR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &repositoryR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.Select("`users`.`id`, `users`.`name`, `users`.`admin`, `a`.`repository_id`"),
		qm.From("`users`"),
		qm.InnerJoin("`repository_owners` as `a` on `users`.`id` = `a`.`user_id`"),
		qm.WhereIn("`a`.`repository_id` in ?", argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load users")
	}

	var resultSlice []*User

	var localJoinCols []string
	for results.Next() {
		one := new(User)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.Name, &one.Admin, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for users")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice users")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Users = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.Repositories = append(foreign.R.Repositories, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Users = append(local.R.Users, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Repositories = append(foreign.R.Repositories, local)
				break
			}
		}
	}

	return nil
}

// SetRepositoryAuth of the repository to the related item.
// Sets o.R.RepositoryAuth to related.
// Adds o to related.R.Repository.
func (o *Repository) SetRepositoryAuth(ctx context.Context, exec boil.ContextExecutor, insert bool, related *RepositoryAuth) error {
	var err error

	if insert {
		related.RepositoryID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE `repository_auth` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, []string{"repository_id"}),
			strmangle.WhereClause("`", "`", 0, repositoryAuthPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.RepositoryID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.RepositoryID = o.ID
	}

	if o.R == nil {
		o.R = &repositoryR{
			RepositoryAuth: related,
		}
	} else {
		o.R.RepositoryAuth = related
	}

	if related.R == nil {
		related.R = &repositoryAuthR{
			Repository: o,
		}
	} else {
		related.R.Repository = o
	}
	return nil
}

// AddApplications adds the given related objects to the existing relationships
// of the repository, optionally inserting them as new records.
// Appends related to o.R.Applications.
// Sets related.R.Repository appropriately.
func (o *Repository) AddApplications(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Application) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RepositoryID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `applications` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"repository_id"}),
				strmangle.WhereClause("`", "`", 0, applicationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RepositoryID = o.ID
		}
	}

	if o.R == nil {
		o.R = &repositoryR{
			Applications: related,
		}
	} else {
		o.R.Applications = append(o.R.Applications, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &applicationR{
				Repository: o,
			}
		} else {
			rel.R.Repository = o
		}
	}
	return nil
}

// AddUsers adds the given related objects to the existing relationships
// of the repository, optionally inserting them as new records.
// Appends related to o.R.Users.
// Sets related.R.Repositories appropriately.
func (o *Repository) AddUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into `repository_owners` (`repository_id`, `user_id`) values (?, ?)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &repositoryR{
			Users: related,
		}
	} else {
		o.R.Users = append(o.R.Users, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				Repositories: RepositorySlice{o},
			}
		} else {
			rel.R.Repositories = append(rel.R.Repositories, o)
		}
	}
	return nil
}

// SetUsers removes all previously related items of the
// repository replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Repositories's Users accordingly.
// Replaces o.R.Users with related.
// Sets related.R.Repositories's Users accordingly.
func (o *Repository) SetUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	query := "delete from `repository_owners` where `repository_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeUsersFromRepositoriesSlice(o, related)
	if o.R != nil {
		o.R.Users = nil
	}

	return o.AddUsers(ctx, exec, insert, related...)
}

// RemoveUsers relationships from objects passed in.
// Removes related items from R.Users (uses pointer comparison, removal does not keep order)
// Sets related.R.Repositories.
func (o *Repository) RemoveUsers(ctx context.Context, exec boil.ContextExecutor, related ...*User) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from `repository_owners` where `repository_id` = ? and `user_id` in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeUsersFromRepositoriesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Users {
			if rel != ri {
				continue
			}

			ln := len(o.R.Users)
			if ln > 1 && i < ln-1 {
				o.R.Users[i] = o.R.Users[ln-1]
			}
			o.R.Users = o.R.Users[:ln-1]
			break
		}
	}

	return nil
}

func removeUsersFromRepositoriesSlice(o *Repository, related []*User) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Repositories {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Repositories)
			if ln > 1 && i < ln-1 {
				rel.R.Repositories[i] = rel.R.Repositories[ln-1]
			}
			rel.R.Repositories = rel.R.Repositories[:ln-1]
			break
		}
	}
}

// Repositories retrieves all the records using an executor.
func Repositories(mods ...qm.QueryMod) repositoryQuery {
	mods = append(mods, qm.From("`repositories`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`repositories`.*"})
	}

	return repositoryQuery{q}
}

// FindRepository retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRepository(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Repository, error) {
	repositoryObj := &Repository{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `repositories` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, repositoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from repositories")
	}

	if err = repositoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return repositoryObj, err
	}

	return repositoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Repository) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no repositories provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(repositoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	repositoryInsertCacheMut.RLock()
	cache, cached := repositoryInsertCache[key]
	repositoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			repositoryAllColumns,
			repositoryColumnsWithDefault,
			repositoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(repositoryType, repositoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(repositoryType, repositoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `repositories` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `repositories` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `repositories` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, repositoryPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into repositories")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for repositories")
	}

CacheNoHooks:
	if !cached {
		repositoryInsertCacheMut.Lock()
		repositoryInsertCache[key] = cache
		repositoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Repository.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Repository) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	repositoryUpdateCacheMut.RLock()
	cache, cached := repositoryUpdateCache[key]
	repositoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			repositoryAllColumns,
			repositoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update repositories, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `repositories` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, repositoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(repositoryType, repositoryMapping, append(wl, repositoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update repositories row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for repositories")
	}

	if !cached {
		repositoryUpdateCacheMut.Lock()
		repositoryUpdateCache[key] = cache
		repositoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q repositoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for repositories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for repositories")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RepositorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), repositoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `repositories` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, repositoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in repository slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all repository")
	}
	return rowsAff, nil
}

var mySQLRepositoryUniqueColumns = []string{
	"id",
	"url",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Repository) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no repositories provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(repositoryColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLRepositoryUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	repositoryUpsertCacheMut.RLock()
	cache, cached := repositoryUpsertCache[key]
	repositoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			repositoryAllColumns,
			repositoryColumnsWithDefault,
			repositoryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			repositoryAllColumns,
			repositoryPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert repositories, could not build update column list")
		}

		ret := strmangle.SetComplement(repositoryAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`repositories`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `repositories` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(repositoryType, repositoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(repositoryType, repositoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for repositories")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(repositoryType, repositoryMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for repositories")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for repositories")
	}

CacheNoHooks:
	if !cached {
		repositoryUpsertCacheMut.Lock()
		repositoryUpsertCache[key] = cache
		repositoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Repository record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Repository) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Repository provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), repositoryPrimaryKeyMapping)
	sql := "DELETE FROM `repositories` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from repositories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for repositories")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q repositoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no repositoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from repositories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for repositories")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RepositorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(repositoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), repositoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `repositories` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, repositoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from repository slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for repositories")
	}

	if len(repositoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Repository) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRepository(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RepositorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RepositorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), repositoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `repositories`.* FROM `repositories` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, repositoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RepositorySlice")
	}

	*o = slice

	return nil
}

// RepositoryExists checks if the Repository row exists.
func RepositoryExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `repositories` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if repositories exists")
	}

	return exists, nil
}

// Exists checks if the Repository row exists.
func (o *Repository) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RepositoryExists(ctx, exec, o.ID)
}
