// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// PortPublication is an object representing the database table.
type PortPublication struct {
	// アプリケーションID
	ApplicationID string `boil:"application_id" json:"application_id" toml:"application_id" yaml:"application_id"`
	// 公開側ポート
	InternetPort int `boil:"internet_port" json:"internet_port" toml:"internet_port" yaml:"internet_port"`
	// アプリケーション側ポート
	ApplicationPort int `boil:"application_port" json:"application_port" toml:"application_port" yaml:"application_port"`
	// プロトコル
	Protocol string `boil:"protocol" json:"protocol" toml:"protocol" yaml:"protocol"`

	R *portPublicationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L portPublicationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PortPublicationColumns = struct {
	ApplicationID   string
	InternetPort    string
	ApplicationPort string
	Protocol        string
}{
	ApplicationID:   "application_id",
	InternetPort:    "internet_port",
	ApplicationPort: "application_port",
	Protocol:        "protocol",
}

var PortPublicationTableColumns = struct {
	ApplicationID   string
	InternetPort    string
	ApplicationPort string
	Protocol        string
}{
	ApplicationID:   "port_publications.application_id",
	InternetPort:    "port_publications.internet_port",
	ApplicationPort: "port_publications.application_port",
	Protocol:        "port_publications.protocol",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var PortPublicationWhere = struct {
	ApplicationID   whereHelperstring
	InternetPort    whereHelperint
	ApplicationPort whereHelperint
	Protocol        whereHelperstring
}{
	ApplicationID:   whereHelperstring{field: "`port_publications`.`application_id`"},
	InternetPort:    whereHelperint{field: "`port_publications`.`internet_port`"},
	ApplicationPort: whereHelperint{field: "`port_publications`.`application_port`"},
	Protocol:        whereHelperstring{field: "`port_publications`.`protocol`"},
}

// PortPublicationRels is where relationship names are stored.
var PortPublicationRels = struct {
	Application string
}{
	Application: "Application",
}

// portPublicationR is where relationships are stored.
type portPublicationR struct {
	Application *Application `boil:"Application" json:"Application" toml:"Application" yaml:"Application"`
}

// NewStruct creates a new relationship struct
func (*portPublicationR) NewStruct() *portPublicationR {
	return &portPublicationR{}
}

func (o *PortPublication) GetApplication() *Application {
	if o == nil {
		return nil
	}

	return o.R.GetApplication()
}

func (r *portPublicationR) GetApplication() *Application {
	if r == nil {
		return nil
	}

	return r.Application
}

// portPublicationL is where Load methods for each relationship are stored.
type portPublicationL struct{}

var (
	portPublicationAllColumns            = []string{"application_id", "internet_port", "application_port", "protocol"}
	portPublicationColumnsWithoutDefault = []string{"application_id", "internet_port", "application_port", "protocol"}
	portPublicationColumnsWithDefault    = []string{}
	portPublicationPrimaryKeyColumns     = []string{"internet_port", "protocol"}
	portPublicationGeneratedColumns      = []string{}
)

type (
	// PortPublicationSlice is an alias for a slice of pointers to PortPublication.
	// This should almost always be used instead of []PortPublication.
	PortPublicationSlice []*PortPublication
	// PortPublicationHook is the signature for custom PortPublication hook methods
	PortPublicationHook func(context.Context, boil.ContextExecutor, *PortPublication) error

	portPublicationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	portPublicationType                 = reflect.TypeOf(&PortPublication{})
	portPublicationMapping              = queries.MakeStructMapping(portPublicationType)
	portPublicationPrimaryKeyMapping, _ = queries.BindMapping(portPublicationType, portPublicationMapping, portPublicationPrimaryKeyColumns)
	portPublicationInsertCacheMut       sync.RWMutex
	portPublicationInsertCache          = make(map[string]insertCache)
	portPublicationUpdateCacheMut       sync.RWMutex
	portPublicationUpdateCache          = make(map[string]updateCache)
	portPublicationUpsertCacheMut       sync.RWMutex
	portPublicationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var portPublicationAfterSelectMu sync.Mutex
var portPublicationAfterSelectHooks []PortPublicationHook

var portPublicationBeforeInsertMu sync.Mutex
var portPublicationBeforeInsertHooks []PortPublicationHook
var portPublicationAfterInsertMu sync.Mutex
var portPublicationAfterInsertHooks []PortPublicationHook

var portPublicationBeforeUpdateMu sync.Mutex
var portPublicationBeforeUpdateHooks []PortPublicationHook
var portPublicationAfterUpdateMu sync.Mutex
var portPublicationAfterUpdateHooks []PortPublicationHook

var portPublicationBeforeDeleteMu sync.Mutex
var portPublicationBeforeDeleteHooks []PortPublicationHook
var portPublicationAfterDeleteMu sync.Mutex
var portPublicationAfterDeleteHooks []PortPublicationHook

var portPublicationBeforeUpsertMu sync.Mutex
var portPublicationBeforeUpsertHooks []PortPublicationHook
var portPublicationAfterUpsertMu sync.Mutex
var portPublicationAfterUpsertHooks []PortPublicationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PortPublication) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portPublicationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PortPublication) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portPublicationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PortPublication) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portPublicationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PortPublication) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portPublicationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PortPublication) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portPublicationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PortPublication) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portPublicationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PortPublication) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portPublicationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PortPublication) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portPublicationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PortPublication) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portPublicationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPortPublicationHook registers your hook function for all future operations.
func AddPortPublicationHook(hookPoint boil.HookPoint, portPublicationHook PortPublicationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		portPublicationAfterSelectMu.Lock()
		portPublicationAfterSelectHooks = append(portPublicationAfterSelectHooks, portPublicationHook)
		portPublicationAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		portPublicationBeforeInsertMu.Lock()
		portPublicationBeforeInsertHooks = append(portPublicationBeforeInsertHooks, portPublicationHook)
		portPublicationBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		portPublicationAfterInsertMu.Lock()
		portPublicationAfterInsertHooks = append(portPublicationAfterInsertHooks, portPublicationHook)
		portPublicationAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		portPublicationBeforeUpdateMu.Lock()
		portPublicationBeforeUpdateHooks = append(portPublicationBeforeUpdateHooks, portPublicationHook)
		portPublicationBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		portPublicationAfterUpdateMu.Lock()
		portPublicationAfterUpdateHooks = append(portPublicationAfterUpdateHooks, portPublicationHook)
		portPublicationAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		portPublicationBeforeDeleteMu.Lock()
		portPublicationBeforeDeleteHooks = append(portPublicationBeforeDeleteHooks, portPublicationHook)
		portPublicationBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		portPublicationAfterDeleteMu.Lock()
		portPublicationAfterDeleteHooks = append(portPublicationAfterDeleteHooks, portPublicationHook)
		portPublicationAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		portPublicationBeforeUpsertMu.Lock()
		portPublicationBeforeUpsertHooks = append(portPublicationBeforeUpsertHooks, portPublicationHook)
		portPublicationBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		portPublicationAfterUpsertMu.Lock()
		portPublicationAfterUpsertHooks = append(portPublicationAfterUpsertHooks, portPublicationHook)
		portPublicationAfterUpsertMu.Unlock()
	}
}

// One returns a single portPublication record from the query.
func (q portPublicationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PortPublication, error) {
	o := &PortPublication{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for port_publications")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PortPublication records from the query.
func (q portPublicationQuery) All(ctx context.Context, exec boil.ContextExecutor) (PortPublicationSlice, error) {
	var o []*PortPublication

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PortPublication slice")
	}

	if len(portPublicationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PortPublication records in the query.
func (q portPublicationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count port_publications rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q portPublicationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if port_publications exists")
	}

	return count > 0, nil
}

// Application pointed to by the foreign key.
func (o *PortPublication) Application(mods ...qm.QueryMod) applicationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ApplicationID),
	}

	queryMods = append(queryMods, mods...)

	return Applications(queryMods...)
}

// LoadApplication allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (portPublicationL) LoadApplication(ctx context.Context, e boil.ContextExecutor, singular bool, maybePortPublication interface{}, mods queries.Applicator) error {
	var slice []*PortPublication
	var object *PortPublication

	if singular {
		var ok bool
		object, ok = maybePortPublication.(*PortPublication)
		if !ok {
			object = new(PortPublication)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePortPublication)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePortPublication))
			}
		}
	} else {
		s, ok := maybePortPublication.(*[]*PortPublication)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePortPublication)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePortPublication))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &portPublicationR{}
		}
		args[object.ApplicationID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &portPublicationR{}
			}

			args[obj.ApplicationID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`applications`),
		qm.WhereIn(`applications.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Application")
	}

	var resultSlice []*Application
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Application")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for applications")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for applications")
	}

	if len(applicationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Application = foreign
		if foreign.R == nil {
			foreign.R = &applicationR{}
		}
		foreign.R.PortPublications = append(foreign.R.PortPublications, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ApplicationID == foreign.ID {
				local.R.Application = foreign
				if foreign.R == nil {
					foreign.R = &applicationR{}
				}
				foreign.R.PortPublications = append(foreign.R.PortPublications, local)
				break
			}
		}
	}

	return nil
}

// SetApplication of the portPublication to the related item.
// Sets o.R.Application to related.
// Adds o to related.R.PortPublications.
func (o *PortPublication) SetApplication(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Application) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `port_publications` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"application_id"}),
		strmangle.WhereClause("`", "`", 0, portPublicationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.InternetPort, o.Protocol}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ApplicationID = related.ID
	if o.R == nil {
		o.R = &portPublicationR{
			Application: related,
		}
	} else {
		o.R.Application = related
	}

	if related.R == nil {
		related.R = &applicationR{
			PortPublications: PortPublicationSlice{o},
		}
	} else {
		related.R.PortPublications = append(related.R.PortPublications, o)
	}

	return nil
}

// PortPublications retrieves all the records using an executor.
func PortPublications(mods ...qm.QueryMod) portPublicationQuery {
	mods = append(mods, qm.From("`port_publications`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`port_publications`.*"})
	}

	return portPublicationQuery{q}
}

// FindPortPublication retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPortPublication(ctx context.Context, exec boil.ContextExecutor, internetPort int, protocol string, selectCols ...string) (*PortPublication, error) {
	portPublicationObj := &PortPublication{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `port_publications` where `internet_port`=? AND `protocol`=?", sel,
	)

	q := queries.Raw(query, internetPort, protocol)

	err := q.Bind(ctx, exec, portPublicationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from port_publications")
	}

	if err = portPublicationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return portPublicationObj, err
	}

	return portPublicationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PortPublication) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no port_publications provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(portPublicationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	portPublicationInsertCacheMut.RLock()
	cache, cached := portPublicationInsertCache[key]
	portPublicationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			portPublicationAllColumns,
			portPublicationColumnsWithDefault,
			portPublicationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(portPublicationType, portPublicationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(portPublicationType, portPublicationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `port_publications` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `port_publications` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `port_publications` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, portPublicationPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into port_publications")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.InternetPort,
		o.Protocol,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for port_publications")
	}

CacheNoHooks:
	if !cached {
		portPublicationInsertCacheMut.Lock()
		portPublicationInsertCache[key] = cache
		portPublicationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PortPublication.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PortPublication) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	portPublicationUpdateCacheMut.RLock()
	cache, cached := portPublicationUpdateCache[key]
	portPublicationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			portPublicationAllColumns,
			portPublicationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update port_publications, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `port_publications` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, portPublicationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(portPublicationType, portPublicationMapping, append(wl, portPublicationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update port_publications row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for port_publications")
	}

	if !cached {
		portPublicationUpdateCacheMut.Lock()
		portPublicationUpdateCache[key] = cache
		portPublicationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q portPublicationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for port_publications")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for port_publications")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PortPublicationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), portPublicationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `port_publications` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, portPublicationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in portPublication slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all portPublication")
	}
	return rowsAff, nil
}

var mySQLPortPublicationUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PortPublication) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no port_publications provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(portPublicationColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPortPublicationUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	portPublicationUpsertCacheMut.RLock()
	cache, cached := portPublicationUpsertCache[key]
	portPublicationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			portPublicationAllColumns,
			portPublicationColumnsWithDefault,
			portPublicationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			portPublicationAllColumns,
			portPublicationPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert port_publications, could not build update column list")
		}

		ret := strmangle.SetComplement(portPublicationAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`port_publications`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `port_publications` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(portPublicationType, portPublicationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(portPublicationType, portPublicationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for port_publications")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(portPublicationType, portPublicationMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for port_publications")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for port_publications")
	}

CacheNoHooks:
	if !cached {
		portPublicationUpsertCacheMut.Lock()
		portPublicationUpsertCache[key] = cache
		portPublicationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PortPublication record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PortPublication) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PortPublication provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), portPublicationPrimaryKeyMapping)
	sql := "DELETE FROM `port_publications` WHERE `internet_port`=? AND `protocol`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from port_publications")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for port_publications")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q portPublicationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no portPublicationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from port_publications")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for port_publications")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PortPublicationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(portPublicationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), portPublicationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `port_publications` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, portPublicationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from portPublication slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for port_publications")
	}

	if len(portPublicationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PortPublication) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPortPublication(ctx, exec, o.InternetPort, o.Protocol)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PortPublicationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PortPublicationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), portPublicationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `port_publications`.* FROM `port_publications` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, portPublicationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PortPublicationSlice")
	}

	*o = slice

	return nil
}

// PortPublicationExists checks if the PortPublication row exists.
func PortPublicationExists(ctx context.Context, exec boil.ContextExecutor, internetPort int, protocol string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `port_publications` where `internet_port`=? AND `protocol`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, internetPort, protocol)
	}
	row := exec.QueryRowContext(ctx, sql, internetPort, protocol)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if port_publications exists")
	}

	return exists, nil
}

// Exists checks if the PortPublication row exists.
func (o *PortPublication) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PortPublicationExists(ctx, exec, o.InternetPort, o.Protocol)
}
