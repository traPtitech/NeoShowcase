// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: neoshowcase/protobuf/controller.proto

package pbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	pb "github.com/traPtitech/neoshowcase/pkg/infrastructure/grpc/pb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ControllerServiceName is the fully-qualified name of the ControllerService service.
	ControllerServiceName = "neoshowcase.protobuf.ControllerService"
	// ControllerBuilderServiceName is the fully-qualified name of the ControllerBuilderService service.
	ControllerBuilderServiceName = "neoshowcase.protobuf.ControllerBuilderService"
	// BuildpackHelperServiceName is the fully-qualified name of the BuildpackHelperService service.
	BuildpackHelperServiceName = "neoshowcase.protobuf.BuildpackHelperService"
	// ControllerSSGenServiceName is the fully-qualified name of the ControllerSSGenService service.
	ControllerSSGenServiceName = "neoshowcase.protobuf.ControllerSSGenService"
	// GiteaIntegrationServiceName is the fully-qualified name of the GiteaIntegrationService service.
	GiteaIntegrationServiceName = "neoshowcase.protobuf.GiteaIntegrationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ControllerServiceGetSystemInfoProcedure is the fully-qualified name of the ControllerService's
	// GetSystemInfo RPC.
	ControllerServiceGetSystemInfoProcedure = "/neoshowcase.protobuf.ControllerService/GetSystemInfo"
	// ControllerServiceFetchRepositoryProcedure is the fully-qualified name of the ControllerService's
	// FetchRepository RPC.
	ControllerServiceFetchRepositoryProcedure = "/neoshowcase.protobuf.ControllerService/FetchRepository"
	// ControllerServiceRegisterBuildProcedure is the fully-qualified name of the ControllerService's
	// RegisterBuild RPC.
	ControllerServiceRegisterBuildProcedure = "/neoshowcase.protobuf.ControllerService/RegisterBuild"
	// ControllerServiceSyncDeploymentsProcedure is the fully-qualified name of the ControllerService's
	// SyncDeployments RPC.
	ControllerServiceSyncDeploymentsProcedure = "/neoshowcase.protobuf.ControllerService/SyncDeployments"
	// ControllerServiceDiscoverBuildLogInstanceProcedure is the fully-qualified name of the
	// ControllerService's DiscoverBuildLogInstance RPC.
	ControllerServiceDiscoverBuildLogInstanceProcedure = "/neoshowcase.protobuf.ControllerService/DiscoverBuildLogInstance"
	// ControllerServiceStreamBuildLogProcedure is the fully-qualified name of the ControllerService's
	// StreamBuildLog RPC.
	ControllerServiceStreamBuildLogProcedure = "/neoshowcase.protobuf.ControllerService/StreamBuildLog"
	// ControllerServiceStartBuildProcedure is the fully-qualified name of the ControllerService's
	// StartBuild RPC.
	ControllerServiceStartBuildProcedure = "/neoshowcase.protobuf.ControllerService/StartBuild"
	// ControllerServiceCancelBuildProcedure is the fully-qualified name of the ControllerService's
	// CancelBuild RPC.
	ControllerServiceCancelBuildProcedure = "/neoshowcase.protobuf.ControllerService/CancelBuild"
	// ControllerServiceDiscoverBuildLogLocalProcedure is the fully-qualified name of the
	// ControllerService's DiscoverBuildLogLocal RPC.
	ControllerServiceDiscoverBuildLogLocalProcedure = "/neoshowcase.protobuf.ControllerService/DiscoverBuildLogLocal"
	// ControllerServiceStartBuildLocalProcedure is the fully-qualified name of the ControllerService's
	// StartBuildLocal RPC.
	ControllerServiceStartBuildLocalProcedure = "/neoshowcase.protobuf.ControllerService/StartBuildLocal"
	// ControllerServiceSyncDeploymentsLocalProcedure is the fully-qualified name of the
	// ControllerService's SyncDeploymentsLocal RPC.
	ControllerServiceSyncDeploymentsLocalProcedure = "/neoshowcase.protobuf.ControllerService/SyncDeploymentsLocal"
	// ControllerServiceCancelBuildLocalProcedure is the fully-qualified name of the ControllerService's
	// CancelBuildLocal RPC.
	ControllerServiceCancelBuildLocalProcedure = "/neoshowcase.protobuf.ControllerService/CancelBuildLocal"
	// ControllerBuilderServiceGetBuilderSystemInfoProcedure is the fully-qualified name of the
	// ControllerBuilderService's GetBuilderSystemInfo RPC.
	ControllerBuilderServiceGetBuilderSystemInfoProcedure = "/neoshowcase.protobuf.ControllerBuilderService/GetBuilderSystemInfo"
	// ControllerBuilderServicePingBuildProcedure is the fully-qualified name of the
	// ControllerBuilderService's PingBuild RPC.
	ControllerBuilderServicePingBuildProcedure = "/neoshowcase.protobuf.ControllerBuilderService/PingBuild"
	// ControllerBuilderServiceStreamBuildLogProcedure is the fully-qualified name of the
	// ControllerBuilderService's StreamBuildLog RPC.
	ControllerBuilderServiceStreamBuildLogProcedure = "/neoshowcase.protobuf.ControllerBuilderService/StreamBuildLog"
	// ControllerBuilderServiceSaveArtifactProcedure is the fully-qualified name of the
	// ControllerBuilderService's SaveArtifact RPC.
	ControllerBuilderServiceSaveArtifactProcedure = "/neoshowcase.protobuf.ControllerBuilderService/SaveArtifact"
	// ControllerBuilderServiceSaveBuildLogProcedure is the fully-qualified name of the
	// ControllerBuilderService's SaveBuildLog RPC.
	ControllerBuilderServiceSaveBuildLogProcedure = "/neoshowcase.protobuf.ControllerBuilderService/SaveBuildLog"
	// ControllerBuilderServiceSaveRuntimeImageProcedure is the fully-qualified name of the
	// ControllerBuilderService's SaveRuntimeImage RPC.
	ControllerBuilderServiceSaveRuntimeImageProcedure = "/neoshowcase.protobuf.ControllerBuilderService/SaveRuntimeImage"
	// ControllerBuilderServiceConnectBuilderProcedure is the fully-qualified name of the
	// ControllerBuilderService's ConnectBuilder RPC.
	ControllerBuilderServiceConnectBuilderProcedure = "/neoshowcase.protobuf.ControllerBuilderService/ConnectBuilder"
	// BuildpackHelperServiceCopyFileTreeProcedure is the fully-qualified name of the
	// BuildpackHelperService's CopyFileTree RPC.
	BuildpackHelperServiceCopyFileTreeProcedure = "/neoshowcase.protobuf.BuildpackHelperService/CopyFileTree"
	// BuildpackHelperServiceExecProcedure is the fully-qualified name of the BuildpackHelperService's
	// Exec RPC.
	BuildpackHelperServiceExecProcedure = "/neoshowcase.protobuf.BuildpackHelperService/Exec"
	// ControllerSSGenServiceConnectSSGenProcedure is the fully-qualified name of the
	// ControllerSSGenService's ConnectSSGen RPC.
	ControllerSSGenServiceConnectSSGenProcedure = "/neoshowcase.protobuf.ControllerSSGenService/ConnectSSGen"
	// GiteaIntegrationServiceSyncProcedure is the fully-qualified name of the GiteaIntegrationService's
	// Sync RPC.
	GiteaIntegrationServiceSyncProcedure = "/neoshowcase.protobuf.GiteaIntegrationService/Sync"
)

// ControllerServiceClient is a client for the neoshowcase.protobuf.ControllerService service.
type ControllerServiceClient interface {
	GetSystemInfo(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[pb.SystemInfo], error)
	FetchRepository(context.Context, *connect.Request[pb.RepositoryIdRequest]) (*connect.Response[emptypb.Empty], error)
	RegisterBuild(context.Context, *connect.Request[pb.ApplicationIdRequest]) (*connect.Response[emptypb.Empty], error)
	SyncDeployments(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error)
	DiscoverBuildLogInstance(context.Context, *connect.Request[pb.BuildIdRequest]) (*connect.Response[pb.AddressInfo], error)
	StreamBuildLog(context.Context, *connect.Request[pb.BuildIdRequest]) (*connect.ServerStreamForClient[pb.BuildLog], error)
	StartBuild(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error)
	CancelBuild(context.Context, *connect.Request[pb.BuildIdRequest]) (*connect.Response[emptypb.Empty], error)
	DiscoverBuildLogLocal(context.Context, *connect.Request[pb.BuildIdRequest]) (*connect.Response[pb.AddressInfo], error)
	StartBuildLocal(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error)
	SyncDeploymentsLocal(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error)
	CancelBuildLocal(context.Context, *connect.Request[pb.BuildIdRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewControllerServiceClient constructs a client for the neoshowcase.protobuf.ControllerService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewControllerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ControllerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	controllerServiceMethods := pb.File_neoshowcase_protobuf_controller_proto.Services().ByName("ControllerService").Methods()
	return &controllerServiceClient{
		getSystemInfo: connect.NewClient[emptypb.Empty, pb.SystemInfo](
			httpClient,
			baseURL+ControllerServiceGetSystemInfoProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("GetSystemInfo")),
			connect.WithClientOptions(opts...),
		),
		fetchRepository: connect.NewClient[pb.RepositoryIdRequest, emptypb.Empty](
			httpClient,
			baseURL+ControllerServiceFetchRepositoryProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("FetchRepository")),
			connect.WithClientOptions(opts...),
		),
		registerBuild: connect.NewClient[pb.ApplicationIdRequest, emptypb.Empty](
			httpClient,
			baseURL+ControllerServiceRegisterBuildProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("RegisterBuild")),
			connect.WithClientOptions(opts...),
		),
		syncDeployments: connect.NewClient[emptypb.Empty, emptypb.Empty](
			httpClient,
			baseURL+ControllerServiceSyncDeploymentsProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("SyncDeployments")),
			connect.WithClientOptions(opts...),
		),
		discoverBuildLogInstance: connect.NewClient[pb.BuildIdRequest, pb.AddressInfo](
			httpClient,
			baseURL+ControllerServiceDiscoverBuildLogInstanceProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("DiscoverBuildLogInstance")),
			connect.WithClientOptions(opts...),
		),
		streamBuildLog: connect.NewClient[pb.BuildIdRequest, pb.BuildLog](
			httpClient,
			baseURL+ControllerServiceStreamBuildLogProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("StreamBuildLog")),
			connect.WithClientOptions(opts...),
		),
		startBuild: connect.NewClient[emptypb.Empty, emptypb.Empty](
			httpClient,
			baseURL+ControllerServiceStartBuildProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("StartBuild")),
			connect.WithClientOptions(opts...),
		),
		cancelBuild: connect.NewClient[pb.BuildIdRequest, emptypb.Empty](
			httpClient,
			baseURL+ControllerServiceCancelBuildProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("CancelBuild")),
			connect.WithClientOptions(opts...),
		),
		discoverBuildLogLocal: connect.NewClient[pb.BuildIdRequest, pb.AddressInfo](
			httpClient,
			baseURL+ControllerServiceDiscoverBuildLogLocalProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("DiscoverBuildLogLocal")),
			connect.WithClientOptions(opts...),
		),
		startBuildLocal: connect.NewClient[emptypb.Empty, emptypb.Empty](
			httpClient,
			baseURL+ControllerServiceStartBuildLocalProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("StartBuildLocal")),
			connect.WithClientOptions(opts...),
		),
		syncDeploymentsLocal: connect.NewClient[emptypb.Empty, emptypb.Empty](
			httpClient,
			baseURL+ControllerServiceSyncDeploymentsLocalProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("SyncDeploymentsLocal")),
			connect.WithClientOptions(opts...),
		),
		cancelBuildLocal: connect.NewClient[pb.BuildIdRequest, emptypb.Empty](
			httpClient,
			baseURL+ControllerServiceCancelBuildLocalProcedure,
			connect.WithSchema(controllerServiceMethods.ByName("CancelBuildLocal")),
			connect.WithClientOptions(opts...),
		),
	}
}

// controllerServiceClient implements ControllerServiceClient.
type controllerServiceClient struct {
	getSystemInfo            *connect.Client[emptypb.Empty, pb.SystemInfo]
	fetchRepository          *connect.Client[pb.RepositoryIdRequest, emptypb.Empty]
	registerBuild            *connect.Client[pb.ApplicationIdRequest, emptypb.Empty]
	syncDeployments          *connect.Client[emptypb.Empty, emptypb.Empty]
	discoverBuildLogInstance *connect.Client[pb.BuildIdRequest, pb.AddressInfo]
	streamBuildLog           *connect.Client[pb.BuildIdRequest, pb.BuildLog]
	startBuild               *connect.Client[emptypb.Empty, emptypb.Empty]
	cancelBuild              *connect.Client[pb.BuildIdRequest, emptypb.Empty]
	discoverBuildLogLocal    *connect.Client[pb.BuildIdRequest, pb.AddressInfo]
	startBuildLocal          *connect.Client[emptypb.Empty, emptypb.Empty]
	syncDeploymentsLocal     *connect.Client[emptypb.Empty, emptypb.Empty]
	cancelBuildLocal         *connect.Client[pb.BuildIdRequest, emptypb.Empty]
}

// GetSystemInfo calls neoshowcase.protobuf.ControllerService.GetSystemInfo.
func (c *controllerServiceClient) GetSystemInfo(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[pb.SystemInfo], error) {
	return c.getSystemInfo.CallUnary(ctx, req)
}

// FetchRepository calls neoshowcase.protobuf.ControllerService.FetchRepository.
func (c *controllerServiceClient) FetchRepository(ctx context.Context, req *connect.Request[pb.RepositoryIdRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.fetchRepository.CallUnary(ctx, req)
}

// RegisterBuild calls neoshowcase.protobuf.ControllerService.RegisterBuild.
func (c *controllerServiceClient) RegisterBuild(ctx context.Context, req *connect.Request[pb.ApplicationIdRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.registerBuild.CallUnary(ctx, req)
}

// SyncDeployments calls neoshowcase.protobuf.ControllerService.SyncDeployments.
func (c *controllerServiceClient) SyncDeployments(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error) {
	return c.syncDeployments.CallUnary(ctx, req)
}

// DiscoverBuildLogInstance calls neoshowcase.protobuf.ControllerService.DiscoverBuildLogInstance.
func (c *controllerServiceClient) DiscoverBuildLogInstance(ctx context.Context, req *connect.Request[pb.BuildIdRequest]) (*connect.Response[pb.AddressInfo], error) {
	return c.discoverBuildLogInstance.CallUnary(ctx, req)
}

// StreamBuildLog calls neoshowcase.protobuf.ControllerService.StreamBuildLog.
func (c *controllerServiceClient) StreamBuildLog(ctx context.Context, req *connect.Request[pb.BuildIdRequest]) (*connect.ServerStreamForClient[pb.BuildLog], error) {
	return c.streamBuildLog.CallServerStream(ctx, req)
}

// StartBuild calls neoshowcase.protobuf.ControllerService.StartBuild.
func (c *controllerServiceClient) StartBuild(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error) {
	return c.startBuild.CallUnary(ctx, req)
}

// CancelBuild calls neoshowcase.protobuf.ControllerService.CancelBuild.
func (c *controllerServiceClient) CancelBuild(ctx context.Context, req *connect.Request[pb.BuildIdRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.cancelBuild.CallUnary(ctx, req)
}

// DiscoverBuildLogLocal calls neoshowcase.protobuf.ControllerService.DiscoverBuildLogLocal.
func (c *controllerServiceClient) DiscoverBuildLogLocal(ctx context.Context, req *connect.Request[pb.BuildIdRequest]) (*connect.Response[pb.AddressInfo], error) {
	return c.discoverBuildLogLocal.CallUnary(ctx, req)
}

// StartBuildLocal calls neoshowcase.protobuf.ControllerService.StartBuildLocal.
func (c *controllerServiceClient) StartBuildLocal(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error) {
	return c.startBuildLocal.CallUnary(ctx, req)
}

// SyncDeploymentsLocal calls neoshowcase.protobuf.ControllerService.SyncDeploymentsLocal.
func (c *controllerServiceClient) SyncDeploymentsLocal(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error) {
	return c.syncDeploymentsLocal.CallUnary(ctx, req)
}

// CancelBuildLocal calls neoshowcase.protobuf.ControllerService.CancelBuildLocal.
func (c *controllerServiceClient) CancelBuildLocal(ctx context.Context, req *connect.Request[pb.BuildIdRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.cancelBuildLocal.CallUnary(ctx, req)
}

// ControllerServiceHandler is an implementation of the neoshowcase.protobuf.ControllerService
// service.
type ControllerServiceHandler interface {
	GetSystemInfo(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[pb.SystemInfo], error)
	FetchRepository(context.Context, *connect.Request[pb.RepositoryIdRequest]) (*connect.Response[emptypb.Empty], error)
	RegisterBuild(context.Context, *connect.Request[pb.ApplicationIdRequest]) (*connect.Response[emptypb.Empty], error)
	SyncDeployments(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error)
	DiscoverBuildLogInstance(context.Context, *connect.Request[pb.BuildIdRequest]) (*connect.Response[pb.AddressInfo], error)
	StreamBuildLog(context.Context, *connect.Request[pb.BuildIdRequest], *connect.ServerStream[pb.BuildLog]) error
	StartBuild(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error)
	CancelBuild(context.Context, *connect.Request[pb.BuildIdRequest]) (*connect.Response[emptypb.Empty], error)
	DiscoverBuildLogLocal(context.Context, *connect.Request[pb.BuildIdRequest]) (*connect.Response[pb.AddressInfo], error)
	StartBuildLocal(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error)
	SyncDeploymentsLocal(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error)
	CancelBuildLocal(context.Context, *connect.Request[pb.BuildIdRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewControllerServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewControllerServiceHandler(svc ControllerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	controllerServiceMethods := pb.File_neoshowcase_protobuf_controller_proto.Services().ByName("ControllerService").Methods()
	controllerServiceGetSystemInfoHandler := connect.NewUnaryHandler(
		ControllerServiceGetSystemInfoProcedure,
		svc.GetSystemInfo,
		connect.WithSchema(controllerServiceMethods.ByName("GetSystemInfo")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceFetchRepositoryHandler := connect.NewUnaryHandler(
		ControllerServiceFetchRepositoryProcedure,
		svc.FetchRepository,
		connect.WithSchema(controllerServiceMethods.ByName("FetchRepository")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceRegisterBuildHandler := connect.NewUnaryHandler(
		ControllerServiceRegisterBuildProcedure,
		svc.RegisterBuild,
		connect.WithSchema(controllerServiceMethods.ByName("RegisterBuild")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceSyncDeploymentsHandler := connect.NewUnaryHandler(
		ControllerServiceSyncDeploymentsProcedure,
		svc.SyncDeployments,
		connect.WithSchema(controllerServiceMethods.ByName("SyncDeployments")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceDiscoverBuildLogInstanceHandler := connect.NewUnaryHandler(
		ControllerServiceDiscoverBuildLogInstanceProcedure,
		svc.DiscoverBuildLogInstance,
		connect.WithSchema(controllerServiceMethods.ByName("DiscoverBuildLogInstance")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceStreamBuildLogHandler := connect.NewServerStreamHandler(
		ControllerServiceStreamBuildLogProcedure,
		svc.StreamBuildLog,
		connect.WithSchema(controllerServiceMethods.ByName("StreamBuildLog")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceStartBuildHandler := connect.NewUnaryHandler(
		ControllerServiceStartBuildProcedure,
		svc.StartBuild,
		connect.WithSchema(controllerServiceMethods.ByName("StartBuild")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceCancelBuildHandler := connect.NewUnaryHandler(
		ControllerServiceCancelBuildProcedure,
		svc.CancelBuild,
		connect.WithSchema(controllerServiceMethods.ByName("CancelBuild")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceDiscoverBuildLogLocalHandler := connect.NewUnaryHandler(
		ControllerServiceDiscoverBuildLogLocalProcedure,
		svc.DiscoverBuildLogLocal,
		connect.WithSchema(controllerServiceMethods.ByName("DiscoverBuildLogLocal")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceStartBuildLocalHandler := connect.NewUnaryHandler(
		ControllerServiceStartBuildLocalProcedure,
		svc.StartBuildLocal,
		connect.WithSchema(controllerServiceMethods.ByName("StartBuildLocal")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceSyncDeploymentsLocalHandler := connect.NewUnaryHandler(
		ControllerServiceSyncDeploymentsLocalProcedure,
		svc.SyncDeploymentsLocal,
		connect.WithSchema(controllerServiceMethods.ByName("SyncDeploymentsLocal")),
		connect.WithHandlerOptions(opts...),
	)
	controllerServiceCancelBuildLocalHandler := connect.NewUnaryHandler(
		ControllerServiceCancelBuildLocalProcedure,
		svc.CancelBuildLocal,
		connect.WithSchema(controllerServiceMethods.ByName("CancelBuildLocal")),
		connect.WithHandlerOptions(opts...),
	)
	return "/neoshowcase.protobuf.ControllerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ControllerServiceGetSystemInfoProcedure:
			controllerServiceGetSystemInfoHandler.ServeHTTP(w, r)
		case ControllerServiceFetchRepositoryProcedure:
			controllerServiceFetchRepositoryHandler.ServeHTTP(w, r)
		case ControllerServiceRegisterBuildProcedure:
			controllerServiceRegisterBuildHandler.ServeHTTP(w, r)
		case ControllerServiceSyncDeploymentsProcedure:
			controllerServiceSyncDeploymentsHandler.ServeHTTP(w, r)
		case ControllerServiceDiscoverBuildLogInstanceProcedure:
			controllerServiceDiscoverBuildLogInstanceHandler.ServeHTTP(w, r)
		case ControllerServiceStreamBuildLogProcedure:
			controllerServiceStreamBuildLogHandler.ServeHTTP(w, r)
		case ControllerServiceStartBuildProcedure:
			controllerServiceStartBuildHandler.ServeHTTP(w, r)
		case ControllerServiceCancelBuildProcedure:
			controllerServiceCancelBuildHandler.ServeHTTP(w, r)
		case ControllerServiceDiscoverBuildLogLocalProcedure:
			controllerServiceDiscoverBuildLogLocalHandler.ServeHTTP(w, r)
		case ControllerServiceStartBuildLocalProcedure:
			controllerServiceStartBuildLocalHandler.ServeHTTP(w, r)
		case ControllerServiceSyncDeploymentsLocalProcedure:
			controllerServiceSyncDeploymentsLocalHandler.ServeHTTP(w, r)
		case ControllerServiceCancelBuildLocalProcedure:
			controllerServiceCancelBuildLocalHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedControllerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedControllerServiceHandler struct{}

func (UnimplementedControllerServiceHandler) GetSystemInfo(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[pb.SystemInfo], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("neoshowcase.protobuf.ControllerService.GetSystemInfo is not implemented"))
}

func (UnimplementedControllerServiceHandler) FetchRepository(context.Context, *connect.Request[pb.RepositoryIdRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("neoshowcase.protobuf.ControllerService.FetchRepository is not implemented"))
}

func (UnimplementedControllerServiceHandler) RegisterBuild(context.Context, *connect.Request[pb.ApplicationIdRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("neoshowcase.protobuf.ControllerService.RegisterBuild is not implemented"))
}

func (UnimplementedControllerServiceHandler) SyncDeployments(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("neoshowcase.protobuf.ControllerService.SyncDeployments is not implemented"))
}

func (UnimplementedControllerServiceHandler) DiscoverBuildLogInstance(context.Context, *connect.Request[pb.BuildIdRequest]) (*connect.Response[pb.AddressInfo], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("neoshowcase.protobuf.ControllerService.DiscoverBuildLogInstance is not implemented"))
}

func (UnimplementedControllerServiceHandler) StreamBuildLog(context.Context, *connect.Request[pb.BuildIdRequest], *connect.ServerStream[pb.BuildLog]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("neoshowcase.protobuf.ControllerService.StreamBuildLog is not implemented"))
}

func (UnimplementedControllerServiceHandler) StartBuild(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("neoshowcase.protobuf.ControllerService.StartBuild is not implemented"))
}

func (UnimplementedControllerServiceHandler) CancelBuild(context.Context, *connect.Request[pb.BuildIdRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("neoshowcase.protobuf.ControllerService.CancelBuild is not implemented"))
}

func (UnimplementedControllerServiceHandler) DiscoverBuildLogLocal(context.Context, *connect.Request[pb.BuildIdRequest]) (*connect.Response[pb.AddressInfo], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("neoshowcase.protobuf.ControllerService.DiscoverBuildLogLocal is not implemented"))
}

func (UnimplementedControllerServiceHandler) StartBuildLocal(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("neoshowcase.protobuf.ControllerService.StartBuildLocal is not implemented"))
}

func (UnimplementedControllerServiceHandler) SyncDeploymentsLocal(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("neoshowcase.protobuf.ControllerService.SyncDeploymentsLocal is not implemented"))
}

func (UnimplementedControllerServiceHandler) CancelBuildLocal(context.Context, *connect.Request[pb.BuildIdRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("neoshowcase.protobuf.ControllerService.CancelBuildLocal is not implemented"))
}

// ControllerBuilderServiceClient is a client for the neoshowcase.protobuf.ControllerBuilderService
// service.
type ControllerBuilderServiceClient interface {
	GetBuilderSystemInfo(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[pb.BuilderSystemInfo], error)
	PingBuild(context.Context, *connect.Request[pb.BuildIdRequest]) (*connect.Response[emptypb.Empty], error)
	StreamBuildLog(context.Context) *connect.ClientStreamForClient[pb.BuildLogPortion, emptypb.Empty]
	SaveArtifact(context.Context, *connect.Request[pb.SaveArtifactRequest]) (*connect.Response[emptypb.Empty], error)
	SaveBuildLog(context.Context, *connect.Request[pb.SaveBuildLogRequest]) (*connect.Response[emptypb.Empty], error)
	SaveRuntimeImage(context.Context, *connect.Request[pb.SaveRuntimeImageRequest]) (*connect.Response[emptypb.Empty], error)
	ConnectBuilder(context.Context) *connect.BidiStreamForClient[pb.BuilderResponse, pb.BuilderRequest]
}

// NewControllerBuilderServiceClient constructs a client for the
// neoshowcase.protobuf.ControllerBuilderService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewControllerBuilderServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ControllerBuilderServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	controllerBuilderServiceMethods := pb.File_neoshowcase_protobuf_controller_proto.Services().ByName("ControllerBuilderService").Methods()
	return &controllerBuilderServiceClient{
		getBuilderSystemInfo: connect.NewClient[emptypb.Empty, pb.BuilderSystemInfo](
			httpClient,
			baseURL+ControllerBuilderServiceGetBuilderSystemInfoProcedure,
			connect.WithSchema(controllerBuilderServiceMethods.ByName("GetBuilderSystemInfo")),
			connect.WithClientOptions(opts...),
		),
		pingBuild: connect.NewClient[pb.BuildIdRequest, emptypb.Empty](
			httpClient,
			baseURL+ControllerBuilderServicePingBuildProcedure,
			connect.WithSchema(controllerBuilderServiceMethods.ByName("PingBuild")),
			connect.WithClientOptions(opts...),
		),
		streamBuildLog: connect.NewClient[pb.BuildLogPortion, emptypb.Empty](
			httpClient,
			baseURL+ControllerBuilderServiceStreamBuildLogProcedure,
			connect.WithSchema(controllerBuilderServiceMethods.ByName("StreamBuildLog")),
			connect.WithClientOptions(opts...),
		),
		saveArtifact: connect.NewClient[pb.SaveArtifactRequest, emptypb.Empty](
			httpClient,
			baseURL+ControllerBuilderServiceSaveArtifactProcedure,
			connect.WithSchema(controllerBuilderServiceMethods.ByName("SaveArtifact")),
			connect.WithClientOptions(opts...),
		),
		saveBuildLog: connect.NewClient[pb.SaveBuildLogRequest, emptypb.Empty](
			httpClient,
			baseURL+ControllerBuilderServiceSaveBuildLogProcedure,
			connect.WithSchema(controllerBuilderServiceMethods.ByName("SaveBuildLog")),
			connect.WithClientOptions(opts...),
		),
		saveRuntimeImage: connect.NewClient[pb.SaveRuntimeImageRequest, emptypb.Empty](
			httpClient,
			baseURL+ControllerBuilderServiceSaveRuntimeImageProcedure,
			connect.WithSchema(controllerBuilderServiceMethods.ByName("SaveRuntimeImage")),
			connect.WithClientOptions(opts...),
		),
		connectBuilder: connect.NewClient[pb.BuilderResponse, pb.BuilderRequest](
			httpClient,
			baseURL+ControllerBuilderServiceConnectBuilderProcedure,
			connect.WithSchema(controllerBuilderServiceMethods.ByName("ConnectBuilder")),
			connect.WithClientOptions(opts...),
		),
	}
}

// controllerBuilderServiceClient implements ControllerBuilderServiceClient.
type controllerBuilderServiceClient struct {
	getBuilderSystemInfo *connect.Client[emptypb.Empty, pb.BuilderSystemInfo]
	pingBuild            *connect.Client[pb.BuildIdRequest, emptypb.Empty]
	streamBuildLog       *connect.Client[pb.BuildLogPortion, emptypb.Empty]
	saveArtifact         *connect.Client[pb.SaveArtifactRequest, emptypb.Empty]
	saveBuildLog         *connect.Client[pb.SaveBuildLogRequest, emptypb.Empty]
	saveRuntimeImage     *connect.Client[pb.SaveRuntimeImageRequest, emptypb.Empty]
	connectBuilder       *connect.Client[pb.BuilderResponse, pb.BuilderRequest]
}

// GetBuilderSystemInfo calls neoshowcase.protobuf.ControllerBuilderService.GetBuilderSystemInfo.
func (c *controllerBuilderServiceClient) GetBuilderSystemInfo(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[pb.BuilderSystemInfo], error) {
	return c.getBuilderSystemInfo.CallUnary(ctx, req)
}

// PingBuild calls neoshowcase.protobuf.ControllerBuilderService.PingBuild.
func (c *controllerBuilderServiceClient) PingBuild(ctx context.Context, req *connect.Request[pb.BuildIdRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.pingBuild.CallUnary(ctx, req)
}

// StreamBuildLog calls neoshowcase.protobuf.ControllerBuilderService.StreamBuildLog.
func (c *controllerBuilderServiceClient) StreamBuildLog(ctx context.Context) *connect.ClientStreamForClient[pb.BuildLogPortion, emptypb.Empty] {
	return c.streamBuildLog.CallClientStream(ctx)
}

// SaveArtifact calls neoshowcase.protobuf.ControllerBuilderService.SaveArtifact.
func (c *controllerBuilderServiceClient) SaveArtifact(ctx context.Context, req *connect.Request[pb.SaveArtifactRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.saveArtifact.CallUnary(ctx, req)
}

// SaveBuildLog calls neoshowcase.protobuf.ControllerBuilderService.SaveBuildLog.
func (c *controllerBuilderServiceClient) SaveBuildLog(ctx context.Context, req *connect.Request[pb.SaveBuildLogRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.saveBuildLog.CallUnary(ctx, req)
}

// SaveRuntimeImage calls neoshowcase.protobuf.ControllerBuilderService.SaveRuntimeImage.
func (c *controllerBuilderServiceClient) SaveRuntimeImage(ctx context.Context, req *connect.Request[pb.SaveRuntimeImageRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.saveRuntimeImage.CallUnary(ctx, req)
}

// ConnectBuilder calls neoshowcase.protobuf.ControllerBuilderService.ConnectBuilder.
func (c *controllerBuilderServiceClient) ConnectBuilder(ctx context.Context) *connect.BidiStreamForClient[pb.BuilderResponse, pb.BuilderRequest] {
	return c.connectBuilder.CallBidiStream(ctx)
}

// ControllerBuilderServiceHandler is an implementation of the
// neoshowcase.protobuf.ControllerBuilderService service.
type ControllerBuilderServiceHandler interface {
	GetBuilderSystemInfo(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[pb.BuilderSystemInfo], error)
	PingBuild(context.Context, *connect.Request[pb.BuildIdRequest]) (*connect.Response[emptypb.Empty], error)
	StreamBuildLog(context.Context, *connect.ClientStream[pb.BuildLogPortion]) (*connect.Response[emptypb.Empty], error)
	SaveArtifact(context.Context, *connect.Request[pb.SaveArtifactRequest]) (*connect.Response[emptypb.Empty], error)
	SaveBuildLog(context.Context, *connect.Request[pb.SaveBuildLogRequest]) (*connect.Response[emptypb.Empty], error)
	SaveRuntimeImage(context.Context, *connect.Request[pb.SaveRuntimeImageRequest]) (*connect.Response[emptypb.Empty], error)
	ConnectBuilder(context.Context, *connect.BidiStream[pb.BuilderResponse, pb.BuilderRequest]) error
}

// NewControllerBuilderServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewControllerBuilderServiceHandler(svc ControllerBuilderServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	controllerBuilderServiceMethods := pb.File_neoshowcase_protobuf_controller_proto.Services().ByName("ControllerBuilderService").Methods()
	controllerBuilderServiceGetBuilderSystemInfoHandler := connect.NewUnaryHandler(
		ControllerBuilderServiceGetBuilderSystemInfoProcedure,
		svc.GetBuilderSystemInfo,
		connect.WithSchema(controllerBuilderServiceMethods.ByName("GetBuilderSystemInfo")),
		connect.WithHandlerOptions(opts...),
	)
	controllerBuilderServicePingBuildHandler := connect.NewUnaryHandler(
		ControllerBuilderServicePingBuildProcedure,
		svc.PingBuild,
		connect.WithSchema(controllerBuilderServiceMethods.ByName("PingBuild")),
		connect.WithHandlerOptions(opts...),
	)
	controllerBuilderServiceStreamBuildLogHandler := connect.NewClientStreamHandler(
		ControllerBuilderServiceStreamBuildLogProcedure,
		svc.StreamBuildLog,
		connect.WithSchema(controllerBuilderServiceMethods.ByName("StreamBuildLog")),
		connect.WithHandlerOptions(opts...),
	)
	controllerBuilderServiceSaveArtifactHandler := connect.NewUnaryHandler(
		ControllerBuilderServiceSaveArtifactProcedure,
		svc.SaveArtifact,
		connect.WithSchema(controllerBuilderServiceMethods.ByName("SaveArtifact")),
		connect.WithHandlerOptions(opts...),
	)
	controllerBuilderServiceSaveBuildLogHandler := connect.NewUnaryHandler(
		ControllerBuilderServiceSaveBuildLogProcedure,
		svc.SaveBuildLog,
		connect.WithSchema(controllerBuilderServiceMethods.ByName("SaveBuildLog")),
		connect.WithHandlerOptions(opts...),
	)
	controllerBuilderServiceSaveRuntimeImageHandler := connect.NewUnaryHandler(
		ControllerBuilderServiceSaveRuntimeImageProcedure,
		svc.SaveRuntimeImage,
		connect.WithSchema(controllerBuilderServiceMethods.ByName("SaveRuntimeImage")),
		connect.WithHandlerOptions(opts...),
	)
	controllerBuilderServiceConnectBuilderHandler := connect.NewBidiStreamHandler(
		ControllerBuilderServiceConnectBuilderProcedure,
		svc.ConnectBuilder,
		connect.WithSchema(controllerBuilderServiceMethods.ByName("ConnectBuilder")),
		connect.WithHandlerOptions(opts...),
	)
	return "/neoshowcase.protobuf.ControllerBuilderService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ControllerBuilderServiceGetBuilderSystemInfoProcedure:
			controllerBuilderServiceGetBuilderSystemInfoHandler.ServeHTTP(w, r)
		case ControllerBuilderServicePingBuildProcedure:
			controllerBuilderServicePingBuildHandler.ServeHTTP(w, r)
		case ControllerBuilderServiceStreamBuildLogProcedure:
			controllerBuilderServiceStreamBuildLogHandler.ServeHTTP(w, r)
		case ControllerBuilderServiceSaveArtifactProcedure:
			controllerBuilderServiceSaveArtifactHandler.ServeHTTP(w, r)
		case ControllerBuilderServiceSaveBuildLogProcedure:
			controllerBuilderServiceSaveBuildLogHandler.ServeHTTP(w, r)
		case ControllerBuilderServiceSaveRuntimeImageProcedure:
			controllerBuilderServiceSaveRuntimeImageHandler.ServeHTTP(w, r)
		case ControllerBuilderServiceConnectBuilderProcedure:
			controllerBuilderServiceConnectBuilderHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedControllerBuilderServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedControllerBuilderServiceHandler struct{}

func (UnimplementedControllerBuilderServiceHandler) GetBuilderSystemInfo(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[pb.BuilderSystemInfo], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("neoshowcase.protobuf.ControllerBuilderService.GetBuilderSystemInfo is not implemented"))
}

func (UnimplementedControllerBuilderServiceHandler) PingBuild(context.Context, *connect.Request[pb.BuildIdRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("neoshowcase.protobuf.ControllerBuilderService.PingBuild is not implemented"))
}

func (UnimplementedControllerBuilderServiceHandler) StreamBuildLog(context.Context, *connect.ClientStream[pb.BuildLogPortion]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("neoshowcase.protobuf.ControllerBuilderService.StreamBuildLog is not implemented"))
}

func (UnimplementedControllerBuilderServiceHandler) SaveArtifact(context.Context, *connect.Request[pb.SaveArtifactRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("neoshowcase.protobuf.ControllerBuilderService.SaveArtifact is not implemented"))
}

func (UnimplementedControllerBuilderServiceHandler) SaveBuildLog(context.Context, *connect.Request[pb.SaveBuildLogRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("neoshowcase.protobuf.ControllerBuilderService.SaveBuildLog is not implemented"))
}

func (UnimplementedControllerBuilderServiceHandler) SaveRuntimeImage(context.Context, *connect.Request[pb.SaveRuntimeImageRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("neoshowcase.protobuf.ControllerBuilderService.SaveRuntimeImage is not implemented"))
}

func (UnimplementedControllerBuilderServiceHandler) ConnectBuilder(context.Context, *connect.BidiStream[pb.BuilderResponse, pb.BuilderRequest]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("neoshowcase.protobuf.ControllerBuilderService.ConnectBuilder is not implemented"))
}

// BuildpackHelperServiceClient is a client for the neoshowcase.protobuf.BuildpackHelperService
// service.
type BuildpackHelperServiceClient interface {
	CopyFileTree(context.Context, *connect.Request[pb.CopyFileTreeRequest]) (*connect.Response[emptypb.Empty], error)
	Exec(context.Context, *connect.Request[pb.HelperExecRequest]) (*connect.ServerStreamForClient[pb.HelperExecResponse], error)
}

// NewBuildpackHelperServiceClient constructs a client for the
// neoshowcase.protobuf.BuildpackHelperService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBuildpackHelperServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BuildpackHelperServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	buildpackHelperServiceMethods := pb.File_neoshowcase_protobuf_controller_proto.Services().ByName("BuildpackHelperService").Methods()
	return &buildpackHelperServiceClient{
		copyFileTree: connect.NewClient[pb.CopyFileTreeRequest, emptypb.Empty](
			httpClient,
			baseURL+BuildpackHelperServiceCopyFileTreeProcedure,
			connect.WithSchema(buildpackHelperServiceMethods.ByName("CopyFileTree")),
			connect.WithClientOptions(opts...),
		),
		exec: connect.NewClient[pb.HelperExecRequest, pb.HelperExecResponse](
			httpClient,
			baseURL+BuildpackHelperServiceExecProcedure,
			connect.WithSchema(buildpackHelperServiceMethods.ByName("Exec")),
			connect.WithClientOptions(opts...),
		),
	}
}

// buildpackHelperServiceClient implements BuildpackHelperServiceClient.
type buildpackHelperServiceClient struct {
	copyFileTree *connect.Client[pb.CopyFileTreeRequest, emptypb.Empty]
	exec         *connect.Client[pb.HelperExecRequest, pb.HelperExecResponse]
}

// CopyFileTree calls neoshowcase.protobuf.BuildpackHelperService.CopyFileTree.
func (c *buildpackHelperServiceClient) CopyFileTree(ctx context.Context, req *connect.Request[pb.CopyFileTreeRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.copyFileTree.CallUnary(ctx, req)
}

// Exec calls neoshowcase.protobuf.BuildpackHelperService.Exec.
func (c *buildpackHelperServiceClient) Exec(ctx context.Context, req *connect.Request[pb.HelperExecRequest]) (*connect.ServerStreamForClient[pb.HelperExecResponse], error) {
	return c.exec.CallServerStream(ctx, req)
}

// BuildpackHelperServiceHandler is an implementation of the
// neoshowcase.protobuf.BuildpackHelperService service.
type BuildpackHelperServiceHandler interface {
	CopyFileTree(context.Context, *connect.Request[pb.CopyFileTreeRequest]) (*connect.Response[emptypb.Empty], error)
	Exec(context.Context, *connect.Request[pb.HelperExecRequest], *connect.ServerStream[pb.HelperExecResponse]) error
}

// NewBuildpackHelperServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBuildpackHelperServiceHandler(svc BuildpackHelperServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	buildpackHelperServiceMethods := pb.File_neoshowcase_protobuf_controller_proto.Services().ByName("BuildpackHelperService").Methods()
	buildpackHelperServiceCopyFileTreeHandler := connect.NewUnaryHandler(
		BuildpackHelperServiceCopyFileTreeProcedure,
		svc.CopyFileTree,
		connect.WithSchema(buildpackHelperServiceMethods.ByName("CopyFileTree")),
		connect.WithHandlerOptions(opts...),
	)
	buildpackHelperServiceExecHandler := connect.NewServerStreamHandler(
		BuildpackHelperServiceExecProcedure,
		svc.Exec,
		connect.WithSchema(buildpackHelperServiceMethods.ByName("Exec")),
		connect.WithHandlerOptions(opts...),
	)
	return "/neoshowcase.protobuf.BuildpackHelperService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BuildpackHelperServiceCopyFileTreeProcedure:
			buildpackHelperServiceCopyFileTreeHandler.ServeHTTP(w, r)
		case BuildpackHelperServiceExecProcedure:
			buildpackHelperServiceExecHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBuildpackHelperServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBuildpackHelperServiceHandler struct{}

func (UnimplementedBuildpackHelperServiceHandler) CopyFileTree(context.Context, *connect.Request[pb.CopyFileTreeRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("neoshowcase.protobuf.BuildpackHelperService.CopyFileTree is not implemented"))
}

func (UnimplementedBuildpackHelperServiceHandler) Exec(context.Context, *connect.Request[pb.HelperExecRequest], *connect.ServerStream[pb.HelperExecResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("neoshowcase.protobuf.BuildpackHelperService.Exec is not implemented"))
}

// ControllerSSGenServiceClient is a client for the neoshowcase.protobuf.ControllerSSGenService
// service.
type ControllerSSGenServiceClient interface {
	ConnectSSGen(context.Context, *connect.Request[emptypb.Empty]) (*connect.ServerStreamForClient[pb.SSGenRequest], error)
}

// NewControllerSSGenServiceClient constructs a client for the
// neoshowcase.protobuf.ControllerSSGenService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewControllerSSGenServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ControllerSSGenServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	controllerSSGenServiceMethods := pb.File_neoshowcase_protobuf_controller_proto.Services().ByName("ControllerSSGenService").Methods()
	return &controllerSSGenServiceClient{
		connectSSGen: connect.NewClient[emptypb.Empty, pb.SSGenRequest](
			httpClient,
			baseURL+ControllerSSGenServiceConnectSSGenProcedure,
			connect.WithSchema(controllerSSGenServiceMethods.ByName("ConnectSSGen")),
			connect.WithClientOptions(opts...),
		),
	}
}

// controllerSSGenServiceClient implements ControllerSSGenServiceClient.
type controllerSSGenServiceClient struct {
	connectSSGen *connect.Client[emptypb.Empty, pb.SSGenRequest]
}

// ConnectSSGen calls neoshowcase.protobuf.ControllerSSGenService.ConnectSSGen.
func (c *controllerSSGenServiceClient) ConnectSSGen(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.ServerStreamForClient[pb.SSGenRequest], error) {
	return c.connectSSGen.CallServerStream(ctx, req)
}

// ControllerSSGenServiceHandler is an implementation of the
// neoshowcase.protobuf.ControllerSSGenService service.
type ControllerSSGenServiceHandler interface {
	ConnectSSGen(context.Context, *connect.Request[emptypb.Empty], *connect.ServerStream[pb.SSGenRequest]) error
}

// NewControllerSSGenServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewControllerSSGenServiceHandler(svc ControllerSSGenServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	controllerSSGenServiceMethods := pb.File_neoshowcase_protobuf_controller_proto.Services().ByName("ControllerSSGenService").Methods()
	controllerSSGenServiceConnectSSGenHandler := connect.NewServerStreamHandler(
		ControllerSSGenServiceConnectSSGenProcedure,
		svc.ConnectSSGen,
		connect.WithSchema(controllerSSGenServiceMethods.ByName("ConnectSSGen")),
		connect.WithHandlerOptions(opts...),
	)
	return "/neoshowcase.protobuf.ControllerSSGenService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ControllerSSGenServiceConnectSSGenProcedure:
			controllerSSGenServiceConnectSSGenHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedControllerSSGenServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedControllerSSGenServiceHandler struct{}

func (UnimplementedControllerSSGenServiceHandler) ConnectSSGen(context.Context, *connect.Request[emptypb.Empty], *connect.ServerStream[pb.SSGenRequest]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("neoshowcase.protobuf.ControllerSSGenService.ConnectSSGen is not implemented"))
}

// GiteaIntegrationServiceClient is a client for the neoshowcase.protobuf.GiteaIntegrationService
// service.
type GiteaIntegrationServiceClient interface {
	Sync(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error)
}

// NewGiteaIntegrationServiceClient constructs a client for the
// neoshowcase.protobuf.GiteaIntegrationService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGiteaIntegrationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GiteaIntegrationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	giteaIntegrationServiceMethods := pb.File_neoshowcase_protobuf_controller_proto.Services().ByName("GiteaIntegrationService").Methods()
	return &giteaIntegrationServiceClient{
		sync: connect.NewClient[emptypb.Empty, emptypb.Empty](
			httpClient,
			baseURL+GiteaIntegrationServiceSyncProcedure,
			connect.WithSchema(giteaIntegrationServiceMethods.ByName("Sync")),
			connect.WithClientOptions(opts...),
		),
	}
}

// giteaIntegrationServiceClient implements GiteaIntegrationServiceClient.
type giteaIntegrationServiceClient struct {
	sync *connect.Client[emptypb.Empty, emptypb.Empty]
}

// Sync calls neoshowcase.protobuf.GiteaIntegrationService.Sync.
func (c *giteaIntegrationServiceClient) Sync(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error) {
	return c.sync.CallUnary(ctx, req)
}

// GiteaIntegrationServiceHandler is an implementation of the
// neoshowcase.protobuf.GiteaIntegrationService service.
type GiteaIntegrationServiceHandler interface {
	Sync(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error)
}

// NewGiteaIntegrationServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGiteaIntegrationServiceHandler(svc GiteaIntegrationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	giteaIntegrationServiceMethods := pb.File_neoshowcase_protobuf_controller_proto.Services().ByName("GiteaIntegrationService").Methods()
	giteaIntegrationServiceSyncHandler := connect.NewUnaryHandler(
		GiteaIntegrationServiceSyncProcedure,
		svc.Sync,
		connect.WithSchema(giteaIntegrationServiceMethods.ByName("Sync")),
		connect.WithHandlerOptions(opts...),
	)
	return "/neoshowcase.protobuf.GiteaIntegrationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GiteaIntegrationServiceSyncProcedure:
			giteaIntegrationServiceSyncHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGiteaIntegrationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGiteaIntegrationServiceHandler struct{}

func (UnimplementedGiteaIntegrationServiceHandler) Sync(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("neoshowcase.protobuf.GiteaIntegrationService.Sync is not implemented"))
}
