// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file neoshowcase/protobuf/gateway.proto (package neoshowcase.protobuf, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Empty, Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { NullTimestamp } from "./null_pb.js";

/**
 * @generated from enum neoshowcase.protobuf.DeployType
 */
export enum DeployType {
  /**
   * @generated from enum value: RUNTIME = 0;
   */
  RUNTIME = 0,

  /**
   * @generated from enum value: STATIC = 1;
   */
  STATIC = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(DeployType)
proto3.util.setEnumType(DeployType, "neoshowcase.protobuf.DeployType", [
  { no: 0, name: "RUNTIME" },
  { no: 1, name: "STATIC" },
]);

/**
 * @generated from enum neoshowcase.protobuf.AuthenticationType
 */
export enum AuthenticationType {
  /**
   * @generated from enum value: OFF = 0;
   */
  OFF = 0,

  /**
   * @generated from enum value: SOFT = 1;
   */
  SOFT = 1,

  /**
   * @generated from enum value: HARD = 2;
   */
  HARD = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(AuthenticationType)
proto3.util.setEnumType(AuthenticationType, "neoshowcase.protobuf.AuthenticationType", [
  { no: 0, name: "OFF" },
  { no: 1, name: "SOFT" },
  { no: 2, name: "HARD" },
]);

/**
 * @generated from enum neoshowcase.protobuf.PortPublicationProtocol
 */
export enum PortPublicationProtocol {
  /**
   * @generated from enum value: TCP = 0;
   */
  TCP = 0,

  /**
   * @generated from enum value: UDP = 1;
   */
  UDP = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(PortPublicationProtocol)
proto3.util.setEnumType(PortPublicationProtocol, "neoshowcase.protobuf.PortPublicationProtocol", [
  { no: 0, name: "TCP" },
  { no: 1, name: "UDP" },
]);

/**
 * @generated from enum neoshowcase.protobuf.BuildStatus
 */
export enum BuildStatus {
  /**
   * @generated from enum value: QUEUED = 0;
   */
  QUEUED = 0,

  /**
   * @generated from enum value: BUILDING = 1;
   */
  BUILDING = 1,

  /**
   * @generated from enum value: SUCCEEDED = 2;
   */
  SUCCEEDED = 2,

  /**
   * @generated from enum value: FAILED = 3;
   */
  FAILED = 3,

  /**
   * @generated from enum value: CANCELLED = 4;
   */
  CANCELLED = 4,

  /**
   * @generated from enum value: SKIPPED = 5;
   */
  SKIPPED = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(BuildStatus)
proto3.util.setEnumType(BuildStatus, "neoshowcase.protobuf.BuildStatus", [
  { no: 0, name: "QUEUED" },
  { no: 1, name: "BUILDING" },
  { no: 2, name: "SUCCEEDED" },
  { no: 3, name: "FAILED" },
  { no: 4, name: "CANCELLED" },
  { no: 5, name: "SKIPPED" },
]);

/**
 * @generated from message neoshowcase.protobuf.SSHInfo
 */
export class SSHInfo extends Message<SSHInfo> {
  /**
   * @generated from field: string host = 1;
   */
  host = "";

  /**
   * @generated from field: int32 port = 2;
   */
  port = 0;

  constructor(data?: PartialMessage<SSHInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.SSHInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "port", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SSHInfo {
    return new SSHInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SSHInfo {
    return new SSHInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SSHInfo {
    return new SSHInfo().fromJsonString(jsonString, options);
  }

  static equals(a: SSHInfo | PlainMessage<SSHInfo> | undefined, b: SSHInfo | PlainMessage<SSHInfo> | undefined): boolean {
    return proto3.util.equals(SSHInfo, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.AvailableDomain
 */
export class AvailableDomain extends Message<AvailableDomain> {
  /**
   * @generated from field: string domain = 1;
   */
  domain = "";

  /**
   * @generated from field: repeated string exclude_domains = 2;
   */
  excludeDomains: string[] = [];

  /**
   * @generated from field: bool auth_available = 3;
   */
  authAvailable = false;

  /**
   * already_bound ドメインが他のアプリケーションによって専有されているか
   *
   * @generated from field: bool already_bound = 4;
   */
  alreadyBound = false;

  constructor(data?: PartialMessage<AvailableDomain>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.AvailableDomain";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "exclude_domains", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "auth_available", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "already_bound", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AvailableDomain {
    return new AvailableDomain().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AvailableDomain {
    return new AvailableDomain().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AvailableDomain {
    return new AvailableDomain().fromJsonString(jsonString, options);
  }

  static equals(a: AvailableDomain | PlainMessage<AvailableDomain> | undefined, b: AvailableDomain | PlainMessage<AvailableDomain> | undefined): boolean {
    return proto3.util.equals(AvailableDomain, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.AvailablePort
 */
export class AvailablePort extends Message<AvailablePort> {
  /**
   * @generated from field: int32 start_port = 1;
   */
  startPort = 0;

  /**
   * @generated from field: int32 end_port = 2;
   */
  endPort = 0;

  /**
   * @generated from field: neoshowcase.protobuf.PortPublicationProtocol protocol = 3;
   */
  protocol = PortPublicationProtocol.TCP;

  constructor(data?: PartialMessage<AvailablePort>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.AvailablePort";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start_port", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "end_port", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "protocol", kind: "enum", T: proto3.getEnumType(PortPublicationProtocol) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AvailablePort {
    return new AvailablePort().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AvailablePort {
    return new AvailablePort().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AvailablePort {
    return new AvailablePort().fromJsonString(jsonString, options);
  }

  static equals(a: AvailablePort | PlainMessage<AvailablePort> | undefined, b: AvailablePort | PlainMessage<AvailablePort> | undefined): boolean {
    return proto3.util.equals(AvailablePort, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.AdditionalLink
 */
export class AdditionalLink extends Message<AdditionalLink> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string url = 2;
   */
  url = "";

  constructor(data?: PartialMessage<AdditionalLink>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.AdditionalLink";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AdditionalLink {
    return new AdditionalLink().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AdditionalLink {
    return new AdditionalLink().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AdditionalLink {
    return new AdditionalLink().fromJsonString(jsonString, options);
  }

  static equals(a: AdditionalLink | PlainMessage<AdditionalLink> | undefined, b: AdditionalLink | PlainMessage<AdditionalLink> | undefined): boolean {
    return proto3.util.equals(AdditionalLink, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.SystemInfo
 */
export class SystemInfo extends Message<SystemInfo> {
  /**
   * public_key システムのSSH公開鍵 リポジトリごとにSSH秘密鍵を設定しないデフォルトSSH認証で使用
   *
   * @generated from field: string public_key = 1;
   */
  publicKey = "";

  /**
   * ssh アプリケーションにSSH接続するための情報
   *
   * @generated from field: neoshowcase.protobuf.SSHInfo ssh = 2;
   */
  ssh?: SSHInfo;

  /**
   * domains 使用可能なドメイン一覧
   *
   * @generated from field: repeated neoshowcase.protobuf.AvailableDomain domains = 3;
   */
  domains: AvailableDomain[] = [];

  /**
   * ports 使用可能なポート一覧
   *
   * @generated from field: repeated neoshowcase.protobuf.AvailablePort ports = 4;
   */
  ports: AvailablePort[] = [];

  /**
   * additional_links UIメニューに表示するリンク一覧
   *
   * @generated from field: repeated neoshowcase.protobuf.AdditionalLink additional_links = 5;
   */
  additionalLinks: AdditionalLink[] = [];

  /**
   * version NeoShowcase version
   *
   * @generated from field: string version = 6;
   */
  version = "";

  /**
   * revision NeoShowcase version
   *
   * @generated from field: string revision = 7;
   */
  revision = "";

  constructor(data?: PartialMessage<SystemInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.SystemInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "public_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ssh", kind: "message", T: SSHInfo },
    { no: 3, name: "domains", kind: "message", T: AvailableDomain, repeated: true },
    { no: 4, name: "ports", kind: "message", T: AvailablePort, repeated: true },
    { no: 5, name: "additional_links", kind: "message", T: AdditionalLink, repeated: true },
    { no: 6, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "revision", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SystemInfo {
    return new SystemInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SystemInfo {
    return new SystemInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SystemInfo {
    return new SystemInfo().fromJsonString(jsonString, options);
  }

  static equals(a: SystemInfo | PlainMessage<SystemInfo> | undefined, b: SystemInfo | PlainMessage<SystemInfo> | undefined): boolean {
    return proto3.util.equals(SystemInfo, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.User
 */
export class User extends Message<User> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: bool admin = 3;
   */
  admin = false;

  /**
   * @generated from field: string avatar_url = 4;
   */
  avatarUrl = "";

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "admin", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "avatar_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.UserKey
 */
export class UserKey extends Message<UserKey> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string user_id = 2;
   */
  userId = "";

  /**
   * @generated from field: string public_key = 3;
   */
  publicKey = "";

  /**
   * @generated from field: string name = 4;
   */
  name = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: Timestamp;

  constructor(data?: PartialMessage<UserKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.UserKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "public_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "created_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserKey {
    return new UserKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserKey {
    return new UserKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserKey {
    return new UserKey().fromJsonString(jsonString, options);
  }

  static equals(a: UserKey | PlainMessage<UserKey> | undefined, b: UserKey | PlainMessage<UserKey> | undefined): boolean {
    return proto3.util.equals(UserKey, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.Repository
 */
export class Repository extends Message<Repository> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string url = 3;
   */
  url = "";

  /**
   * @generated from field: string html_url = 4;
   */
  htmlUrl = "";

  /**
   * @generated from field: neoshowcase.protobuf.Repository.AuthMethod auth_method = 5;
   */
  authMethod = Repository_AuthMethod.NONE;

  /**
   * @generated from field: repeated string owner_ids = 6;
   */
  ownerIds: string[] = [];

  constructor(data?: PartialMessage<Repository>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.Repository";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "html_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "auth_method", kind: "enum", T: proto3.getEnumType(Repository_AuthMethod) },
    { no: 6, name: "owner_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Repository {
    return new Repository().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Repository {
    return new Repository().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Repository {
    return new Repository().fromJsonString(jsonString, options);
  }

  static equals(a: Repository | PlainMessage<Repository> | undefined, b: Repository | PlainMessage<Repository> | undefined): boolean {
    return proto3.util.equals(Repository, a, b);
  }
}

/**
 * @generated from enum neoshowcase.protobuf.Repository.AuthMethod
 */
export enum Repository_AuthMethod {
  /**
   * @generated from enum value: NONE = 0;
   */
  NONE = 0,

  /**
   * @generated from enum value: BASIC = 1;
   */
  BASIC = 1,

  /**
   * @generated from enum value: SSH = 2;
   */
  SSH = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Repository_AuthMethod)
proto3.util.setEnumType(Repository_AuthMethod, "neoshowcase.protobuf.Repository.AuthMethod", [
  { no: 0, name: "NONE" },
  { no: 1, name: "BASIC" },
  { no: 2, name: "SSH" },
]);

/**
 * @generated from message neoshowcase.protobuf.SimpleCommit
 */
export class SimpleCommit extends Message<SimpleCommit> {
  /**
   * @generated from field: string hash = 1;
   */
  hash = "";

  /**
   * @generated from field: string author_name = 2;
   */
  authorName = "";

  /**
   * @generated from field: google.protobuf.Timestamp commit_date = 3;
   */
  commitDate?: Timestamp;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  constructor(data?: PartialMessage<SimpleCommit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.SimpleCommit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "author_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "commit_date", kind: "message", T: Timestamp },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SimpleCommit {
    return new SimpleCommit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SimpleCommit {
    return new SimpleCommit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SimpleCommit {
    return new SimpleCommit().fromJsonString(jsonString, options);
  }

  static equals(a: SimpleCommit | PlainMessage<SimpleCommit> | undefined, b: SimpleCommit | PlainMessage<SimpleCommit> | undefined): boolean {
    return proto3.util.equals(SimpleCommit, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.RuntimeConfig
 */
export class RuntimeConfig extends Message<RuntimeConfig> {
  /**
   * @generated from field: bool use_mariadb = 1;
   */
  useMariadb = false;

  /**
   * @generated from field: bool use_mongodb = 2;
   */
  useMongodb = false;

  /**
   * @generated from field: string entrypoint = 3;
   */
  entrypoint = "";

  /**
   * @generated from field: string command = 4;
   */
  command = "";

  constructor(data?: PartialMessage<RuntimeConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.RuntimeConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "use_mariadb", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "use_mongodb", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "entrypoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "command", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RuntimeConfig {
    return new RuntimeConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RuntimeConfig {
    return new RuntimeConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RuntimeConfig {
    return new RuntimeConfig().fromJsonString(jsonString, options);
  }

  static equals(a: RuntimeConfig | PlainMessage<RuntimeConfig> | undefined, b: RuntimeConfig | PlainMessage<RuntimeConfig> | undefined): boolean {
    return proto3.util.equals(RuntimeConfig, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.BuildConfigRuntimeBuildpack
 */
export class BuildConfigRuntimeBuildpack extends Message<BuildConfigRuntimeBuildpack> {
  /**
   * @generated from field: neoshowcase.protobuf.RuntimeConfig runtime_config = 1;
   */
  runtimeConfig?: RuntimeConfig;

  /**
   * @generated from field: string context = 2;
   */
  context = "";

  constructor(data?: PartialMessage<BuildConfigRuntimeBuildpack>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.BuildConfigRuntimeBuildpack";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "runtime_config", kind: "message", T: RuntimeConfig },
    { no: 2, name: "context", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BuildConfigRuntimeBuildpack {
    return new BuildConfigRuntimeBuildpack().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BuildConfigRuntimeBuildpack {
    return new BuildConfigRuntimeBuildpack().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BuildConfigRuntimeBuildpack {
    return new BuildConfigRuntimeBuildpack().fromJsonString(jsonString, options);
  }

  static equals(a: BuildConfigRuntimeBuildpack | PlainMessage<BuildConfigRuntimeBuildpack> | undefined, b: BuildConfigRuntimeBuildpack | PlainMessage<BuildConfigRuntimeBuildpack> | undefined): boolean {
    return proto3.util.equals(BuildConfigRuntimeBuildpack, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.BuildConfigRuntimeCmd
 */
export class BuildConfigRuntimeCmd extends Message<BuildConfigRuntimeCmd> {
  /**
   * @generated from field: neoshowcase.protobuf.RuntimeConfig runtime_config = 1;
   */
  runtimeConfig?: RuntimeConfig;

  /**
   * @generated from field: string base_image = 2;
   */
  baseImage = "";

  /**
   * @generated from field: string build_cmd = 3;
   */
  buildCmd = "";

  constructor(data?: PartialMessage<BuildConfigRuntimeCmd>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.BuildConfigRuntimeCmd";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "runtime_config", kind: "message", T: RuntimeConfig },
    { no: 2, name: "base_image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "build_cmd", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BuildConfigRuntimeCmd {
    return new BuildConfigRuntimeCmd().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BuildConfigRuntimeCmd {
    return new BuildConfigRuntimeCmd().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BuildConfigRuntimeCmd {
    return new BuildConfigRuntimeCmd().fromJsonString(jsonString, options);
  }

  static equals(a: BuildConfigRuntimeCmd | PlainMessage<BuildConfigRuntimeCmd> | undefined, b: BuildConfigRuntimeCmd | PlainMessage<BuildConfigRuntimeCmd> | undefined): boolean {
    return proto3.util.equals(BuildConfigRuntimeCmd, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.BuildConfigRuntimeDockerfile
 */
export class BuildConfigRuntimeDockerfile extends Message<BuildConfigRuntimeDockerfile> {
  /**
   * @generated from field: neoshowcase.protobuf.RuntimeConfig runtime_config = 1;
   */
  runtimeConfig?: RuntimeConfig;

  /**
   * @generated from field: string dockerfile_name = 2;
   */
  dockerfileName = "";

  /**
   * @generated from field: string context = 3;
   */
  context = "";

  constructor(data?: PartialMessage<BuildConfigRuntimeDockerfile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.BuildConfigRuntimeDockerfile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "runtime_config", kind: "message", T: RuntimeConfig },
    { no: 2, name: "dockerfile_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "context", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BuildConfigRuntimeDockerfile {
    return new BuildConfigRuntimeDockerfile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BuildConfigRuntimeDockerfile {
    return new BuildConfigRuntimeDockerfile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BuildConfigRuntimeDockerfile {
    return new BuildConfigRuntimeDockerfile().fromJsonString(jsonString, options);
  }

  static equals(a: BuildConfigRuntimeDockerfile | PlainMessage<BuildConfigRuntimeDockerfile> | undefined, b: BuildConfigRuntimeDockerfile | PlainMessage<BuildConfigRuntimeDockerfile> | undefined): boolean {
    return proto3.util.equals(BuildConfigRuntimeDockerfile, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.StaticConfig
 */
export class StaticConfig extends Message<StaticConfig> {
  /**
   * @generated from field: string artifact_path = 1;
   */
  artifactPath = "";

  /**
   * @generated from field: bool spa = 2;
   */
  spa = false;

  constructor(data?: PartialMessage<StaticConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.StaticConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "artifact_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "spa", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StaticConfig {
    return new StaticConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StaticConfig {
    return new StaticConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StaticConfig {
    return new StaticConfig().fromJsonString(jsonString, options);
  }

  static equals(a: StaticConfig | PlainMessage<StaticConfig> | undefined, b: StaticConfig | PlainMessage<StaticConfig> | undefined): boolean {
    return proto3.util.equals(StaticConfig, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.BuildConfigStaticBuildpack
 */
export class BuildConfigStaticBuildpack extends Message<BuildConfigStaticBuildpack> {
  /**
   * @generated from field: neoshowcase.protobuf.StaticConfig static_config = 1;
   */
  staticConfig?: StaticConfig;

  /**
   * @generated from field: string context = 2;
   */
  context = "";

  constructor(data?: PartialMessage<BuildConfigStaticBuildpack>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.BuildConfigStaticBuildpack";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "static_config", kind: "message", T: StaticConfig },
    { no: 2, name: "context", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BuildConfigStaticBuildpack {
    return new BuildConfigStaticBuildpack().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BuildConfigStaticBuildpack {
    return new BuildConfigStaticBuildpack().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BuildConfigStaticBuildpack {
    return new BuildConfigStaticBuildpack().fromJsonString(jsonString, options);
  }

  static equals(a: BuildConfigStaticBuildpack | PlainMessage<BuildConfigStaticBuildpack> | undefined, b: BuildConfigStaticBuildpack | PlainMessage<BuildConfigStaticBuildpack> | undefined): boolean {
    return proto3.util.equals(BuildConfigStaticBuildpack, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.BuildConfigStaticCmd
 */
export class BuildConfigStaticCmd extends Message<BuildConfigStaticCmd> {
  /**
   * @generated from field: neoshowcase.protobuf.StaticConfig static_config = 1;
   */
  staticConfig?: StaticConfig;

  /**
   * @generated from field: string base_image = 2;
   */
  baseImage = "";

  /**
   * @generated from field: string build_cmd = 3;
   */
  buildCmd = "";

  constructor(data?: PartialMessage<BuildConfigStaticCmd>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.BuildConfigStaticCmd";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "static_config", kind: "message", T: StaticConfig },
    { no: 2, name: "base_image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "build_cmd", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BuildConfigStaticCmd {
    return new BuildConfigStaticCmd().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BuildConfigStaticCmd {
    return new BuildConfigStaticCmd().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BuildConfigStaticCmd {
    return new BuildConfigStaticCmd().fromJsonString(jsonString, options);
  }

  static equals(a: BuildConfigStaticCmd | PlainMessage<BuildConfigStaticCmd> | undefined, b: BuildConfigStaticCmd | PlainMessage<BuildConfigStaticCmd> | undefined): boolean {
    return proto3.util.equals(BuildConfigStaticCmd, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.BuildConfigStaticDockerfile
 */
export class BuildConfigStaticDockerfile extends Message<BuildConfigStaticDockerfile> {
  /**
   * @generated from field: neoshowcase.protobuf.StaticConfig static_config = 1;
   */
  staticConfig?: StaticConfig;

  /**
   * @generated from field: string dockerfile_name = 2;
   */
  dockerfileName = "";

  /**
   * @generated from field: string context = 3;
   */
  context = "";

  constructor(data?: PartialMessage<BuildConfigStaticDockerfile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.BuildConfigStaticDockerfile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "static_config", kind: "message", T: StaticConfig },
    { no: 2, name: "dockerfile_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "context", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BuildConfigStaticDockerfile {
    return new BuildConfigStaticDockerfile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BuildConfigStaticDockerfile {
    return new BuildConfigStaticDockerfile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BuildConfigStaticDockerfile {
    return new BuildConfigStaticDockerfile().fromJsonString(jsonString, options);
  }

  static equals(a: BuildConfigStaticDockerfile | PlainMessage<BuildConfigStaticDockerfile> | undefined, b: BuildConfigStaticDockerfile | PlainMessage<BuildConfigStaticDockerfile> | undefined): boolean {
    return proto3.util.equals(BuildConfigStaticDockerfile, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.ApplicationConfig
 */
export class ApplicationConfig extends Message<ApplicationConfig> {
  /**
   * @generated from oneof neoshowcase.protobuf.ApplicationConfig.build_config
   */
  buildConfig: {
    /**
     * @generated from field: neoshowcase.protobuf.BuildConfigRuntimeBuildpack runtime_buildpack = 1;
     */
    value: BuildConfigRuntimeBuildpack;
    case: "runtimeBuildpack";
  } | {
    /**
     * @generated from field: neoshowcase.protobuf.BuildConfigRuntimeCmd runtime_cmd = 2;
     */
    value: BuildConfigRuntimeCmd;
    case: "runtimeCmd";
  } | {
    /**
     * @generated from field: neoshowcase.protobuf.BuildConfigRuntimeDockerfile runtime_dockerfile = 3;
     */
    value: BuildConfigRuntimeDockerfile;
    case: "runtimeDockerfile";
  } | {
    /**
     * @generated from field: neoshowcase.protobuf.BuildConfigStaticBuildpack static_buildpack = 4;
     */
    value: BuildConfigStaticBuildpack;
    case: "staticBuildpack";
  } | {
    /**
     * @generated from field: neoshowcase.protobuf.BuildConfigStaticCmd static_cmd = 5;
     */
    value: BuildConfigStaticCmd;
    case: "staticCmd";
  } | {
    /**
     * @generated from field: neoshowcase.protobuf.BuildConfigStaticDockerfile static_dockerfile = 6;
     */
    value: BuildConfigStaticDockerfile;
    case: "staticDockerfile";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ApplicationConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.ApplicationConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "runtime_buildpack", kind: "message", T: BuildConfigRuntimeBuildpack, oneof: "build_config" },
    { no: 2, name: "runtime_cmd", kind: "message", T: BuildConfigRuntimeCmd, oneof: "build_config" },
    { no: 3, name: "runtime_dockerfile", kind: "message", T: BuildConfigRuntimeDockerfile, oneof: "build_config" },
    { no: 4, name: "static_buildpack", kind: "message", T: BuildConfigStaticBuildpack, oneof: "build_config" },
    { no: 5, name: "static_cmd", kind: "message", T: BuildConfigStaticCmd, oneof: "build_config" },
    { no: 6, name: "static_dockerfile", kind: "message", T: BuildConfigStaticDockerfile, oneof: "build_config" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApplicationConfig {
    return new ApplicationConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApplicationConfig {
    return new ApplicationConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApplicationConfig {
    return new ApplicationConfig().fromJsonString(jsonString, options);
  }

  static equals(a: ApplicationConfig | PlainMessage<ApplicationConfig> | undefined, b: ApplicationConfig | PlainMessage<ApplicationConfig> | undefined): boolean {
    return proto3.util.equals(ApplicationConfig, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.Website
 */
export class Website extends Message<Website> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string fqdn = 2;
   */
  fqdn = "";

  /**
   * @generated from field: string path_prefix = 3;
   */
  pathPrefix = "";

  /**
   * @generated from field: bool strip_prefix = 4;
   */
  stripPrefix = false;

  /**
   * @generated from field: bool https = 5;
   */
  https = false;

  /**
   * @generated from field: bool h2c = 6;
   */
  h2c = false;

  /**
   * @generated from field: int32 http_port = 7;
   */
  httpPort = 0;

  /**
   * @generated from field: neoshowcase.protobuf.AuthenticationType authentication = 8;
   */
  authentication = AuthenticationType.OFF;

  constructor(data?: PartialMessage<Website>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.Website";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "fqdn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "path_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "strip_prefix", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "https", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "h2c", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "http_port", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "authentication", kind: "enum", T: proto3.getEnumType(AuthenticationType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Website {
    return new Website().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Website {
    return new Website().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Website {
    return new Website().fromJsonString(jsonString, options);
  }

  static equals(a: Website | PlainMessage<Website> | undefined, b: Website | PlainMessage<Website> | undefined): boolean {
    return proto3.util.equals(Website, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.PortPublication
 */
export class PortPublication extends Message<PortPublication> {
  /**
   * @generated from field: int32 internet_port = 1;
   */
  internetPort = 0;

  /**
   * @generated from field: int32 application_port = 2;
   */
  applicationPort = 0;

  /**
   * @generated from field: neoshowcase.protobuf.PortPublicationProtocol protocol = 3;
   */
  protocol = PortPublicationProtocol.TCP;

  constructor(data?: PartialMessage<PortPublication>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.PortPublication";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "internet_port", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "application_port", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "protocol", kind: "enum", T: proto3.getEnumType(PortPublicationProtocol) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PortPublication {
    return new PortPublication().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PortPublication {
    return new PortPublication().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PortPublication {
    return new PortPublication().fromJsonString(jsonString, options);
  }

  static equals(a: PortPublication | PlainMessage<PortPublication> | undefined, b: PortPublication | PlainMessage<PortPublication> | undefined): boolean {
    return proto3.util.equals(PortPublication, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.Application
 */
export class Application extends Message<Application> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string repository_id = 3;
   */
  repositoryId = "";

  /**
   * @generated from field: string ref_name = 4;
   */
  refName = "";

  /**
   * @generated from field: string commit = 5;
   */
  commit = "";

  /**
   * @generated from field: neoshowcase.protobuf.DeployType deploy_type = 6;
   */
  deployType = DeployType.RUNTIME;

  /**
   * @generated from field: bool running = 7;
   */
  running = false;

  /**
   * @generated from field: neoshowcase.protobuf.Application.ContainerState container = 8;
   */
  container = Application_ContainerState.MISSING;

  /**
   * @generated from field: string container_message = 9;
   */
  containerMessage = "";

  /**
   * @generated from field: string current_build = 10;
   */
  currentBuild = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 11;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 12;
   */
  updatedAt?: Timestamp;

  /**
   * @generated from field: neoshowcase.protobuf.ApplicationConfig config = 13;
   */
  config?: ApplicationConfig;

  /**
   * @generated from field: repeated neoshowcase.protobuf.Website websites = 14;
   */
  websites: Website[] = [];

  /**
   * @generated from field: repeated neoshowcase.protobuf.PortPublication port_publications = 15;
   */
  portPublications: PortPublication[] = [];

  /**
   * @generated from field: repeated string owner_ids = 16;
   */
  ownerIds: string[] = [];

  /**
   * @generated from field: optional neoshowcase.protobuf.BuildStatus latest_build_status = 17;
   */
  latestBuildStatus?: BuildStatus;

  constructor(data?: PartialMessage<Application>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.Application";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "repository_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "ref_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "commit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "deploy_type", kind: "enum", T: proto3.getEnumType(DeployType) },
    { no: 7, name: "running", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "container", kind: "enum", T: proto3.getEnumType(Application_ContainerState) },
    { no: 9, name: "container_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "current_build", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "created_at", kind: "message", T: Timestamp },
    { no: 12, name: "updated_at", kind: "message", T: Timestamp },
    { no: 13, name: "config", kind: "message", T: ApplicationConfig },
    { no: 14, name: "websites", kind: "message", T: Website, repeated: true },
    { no: 15, name: "port_publications", kind: "message", T: PortPublication, repeated: true },
    { no: 16, name: "owner_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 17, name: "latest_build_status", kind: "enum", T: proto3.getEnumType(BuildStatus), opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Application {
    return new Application().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Application {
    return new Application().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Application {
    return new Application().fromJsonString(jsonString, options);
  }

  static equals(a: Application | PlainMessage<Application> | undefined, b: Application | PlainMessage<Application> | undefined): boolean {
    return proto3.util.equals(Application, a, b);
  }
}

/**
 * @generated from enum neoshowcase.protobuf.Application.ContainerState
 */
export enum Application_ContainerState {
  /**
   * @generated from enum value: MISSING = 0;
   */
  MISSING = 0,

  /**
   * @generated from enum value: STARTING = 1;
   */
  STARTING = 1,

  /**
   * @generated from enum value: RESTARTING = 2;
   */
  RESTARTING = 2,

  /**
   * @generated from enum value: RUNNING = 3;
   */
  RUNNING = 3,

  /**
   * @generated from enum value: EXITED = 4;
   */
  EXITED = 4,

  /**
   * @generated from enum value: ERRORED = 5;
   */
  ERRORED = 5,

  /**
   * @generated from enum value: UNKNOWN = 6;
   */
  UNKNOWN = 6,
}
// Retrieve enum metadata with: proto3.getEnumType(Application_ContainerState)
proto3.util.setEnumType(Application_ContainerState, "neoshowcase.protobuf.Application.ContainerState", [
  { no: 0, name: "MISSING" },
  { no: 1, name: "STARTING" },
  { no: 2, name: "RESTARTING" },
  { no: 3, name: "RUNNING" },
  { no: 4, name: "EXITED" },
  { no: 5, name: "ERRORED" },
  { no: 6, name: "UNKNOWN" },
]);

/**
 * @generated from message neoshowcase.protobuf.ApplicationEnvVar
 */
export class ApplicationEnvVar extends Message<ApplicationEnvVar> {
  /**
   * @generated from field: string application_id = 1;
   */
  applicationId = "";

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: string value = 3;
   */
  value = "";

  /**
   * @generated from field: bool system = 4;
   */
  system = false;

  constructor(data?: PartialMessage<ApplicationEnvVar>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.ApplicationEnvVar";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "application_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "system", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApplicationEnvVar {
    return new ApplicationEnvVar().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApplicationEnvVar {
    return new ApplicationEnvVar().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApplicationEnvVar {
    return new ApplicationEnvVar().fromJsonString(jsonString, options);
  }

  static equals(a: ApplicationEnvVar | PlainMessage<ApplicationEnvVar> | undefined, b: ApplicationEnvVar | PlainMessage<ApplicationEnvVar> | undefined): boolean {
    return proto3.util.equals(ApplicationEnvVar, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.ApplicationEnvVars
 */
export class ApplicationEnvVars extends Message<ApplicationEnvVars> {
  /**
   * @generated from field: repeated neoshowcase.protobuf.ApplicationEnvVar variables = 1;
   */
  variables: ApplicationEnvVar[] = [];

  constructor(data?: PartialMessage<ApplicationEnvVars>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.ApplicationEnvVars";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "variables", kind: "message", T: ApplicationEnvVar, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApplicationEnvVars {
    return new ApplicationEnvVars().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApplicationEnvVars {
    return new ApplicationEnvVars().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApplicationEnvVars {
    return new ApplicationEnvVars().fromJsonString(jsonString, options);
  }

  static equals(a: ApplicationEnvVars | PlainMessage<ApplicationEnvVars> | undefined, b: ApplicationEnvVars | PlainMessage<ApplicationEnvVars> | undefined): boolean {
    return proto3.util.equals(ApplicationEnvVars, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.Artifact
 */
export class Artifact extends Message<Artifact> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string build_id = 3;
   */
  buildId = "";

  /**
   * @generated from field: int64 size = 4;
   */
  size = protoInt64.zero;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: neoshowcase.protobuf.NullTimestamp deleted_at = 6;
   */
  deletedAt?: NullTimestamp;

  constructor(data?: PartialMessage<Artifact>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.Artifact";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "size", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "created_at", kind: "message", T: Timestamp },
    { no: 6, name: "deleted_at", kind: "message", T: NullTimestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Artifact {
    return new Artifact().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Artifact {
    return new Artifact().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Artifact {
    return new Artifact().fromJsonString(jsonString, options);
  }

  static equals(a: Artifact | PlainMessage<Artifact> | undefined, b: Artifact | PlainMessage<Artifact> | undefined): boolean {
    return proto3.util.equals(Artifact, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.ArtifactContent
 */
export class ArtifactContent extends Message<ArtifactContent> {
  /**
   * @generated from field: string filename = 1;
   */
  filename = "";

  /**
   * @generated from field: bytes content = 2;
   */
  content = new Uint8Array(0);

  constructor(data?: PartialMessage<ArtifactContent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.ArtifactContent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "filename", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "content", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ArtifactContent {
    return new ArtifactContent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ArtifactContent {
    return new ArtifactContent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ArtifactContent {
    return new ArtifactContent().fromJsonString(jsonString, options);
  }

  static equals(a: ArtifactContent | PlainMessage<ArtifactContent> | undefined, b: ArtifactContent | PlainMessage<ArtifactContent> | undefined): boolean {
    return proto3.util.equals(ArtifactContent, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.RuntimeImage
 */
export class RuntimeImage extends Message<RuntimeImage> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string build_id = 2;
   */
  buildId = "";

  /**
   * @generated from field: int64 size = 3;
   */
  size = protoInt64.zero;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 4;
   */
  createdAt?: Timestamp;

  constructor(data?: PartialMessage<RuntimeImage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.RuntimeImage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "size", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "created_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RuntimeImage {
    return new RuntimeImage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RuntimeImage {
    return new RuntimeImage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RuntimeImage {
    return new RuntimeImage().fromJsonString(jsonString, options);
  }

  static equals(a: RuntimeImage | PlainMessage<RuntimeImage> | undefined, b: RuntimeImage | PlainMessage<RuntimeImage> | undefined): boolean {
    return proto3.util.equals(RuntimeImage, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.AvailableMetrics
 */
export class AvailableMetrics extends Message<AvailableMetrics> {
  /**
   * @generated from field: repeated string metrics_names = 1;
   */
  metricsNames: string[] = [];

  constructor(data?: PartialMessage<AvailableMetrics>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.AvailableMetrics";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metrics_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AvailableMetrics {
    return new AvailableMetrics().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AvailableMetrics {
    return new AvailableMetrics().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AvailableMetrics {
    return new AvailableMetrics().fromJsonString(jsonString, options);
  }

  static equals(a: AvailableMetrics | PlainMessage<AvailableMetrics> | undefined, b: AvailableMetrics | PlainMessage<AvailableMetrics> | undefined): boolean {
    return proto3.util.equals(AvailableMetrics, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.ApplicationMetric
 */
export class ApplicationMetric extends Message<ApplicationMetric> {
  /**
   * @generated from field: google.protobuf.Timestamp time = 1;
   */
  time?: Timestamp;

  /**
   * @generated from field: double value = 2;
   */
  value = 0;

  constructor(data?: PartialMessage<ApplicationMetric>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.ApplicationMetric";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time", kind: "message", T: Timestamp },
    { no: 2, name: "value", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApplicationMetric {
    return new ApplicationMetric().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApplicationMetric {
    return new ApplicationMetric().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApplicationMetric {
    return new ApplicationMetric().fromJsonString(jsonString, options);
  }

  static equals(a: ApplicationMetric | PlainMessage<ApplicationMetric> | undefined, b: ApplicationMetric | PlainMessage<ApplicationMetric> | undefined): boolean {
    return proto3.util.equals(ApplicationMetric, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.ApplicationMetrics
 */
export class ApplicationMetrics extends Message<ApplicationMetrics> {
  /**
   * @generated from field: repeated neoshowcase.protobuf.ApplicationMetric metrics = 1;
   */
  metrics: ApplicationMetric[] = [];

  constructor(data?: PartialMessage<ApplicationMetrics>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.ApplicationMetrics";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metrics", kind: "message", T: ApplicationMetric, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApplicationMetrics {
    return new ApplicationMetrics().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApplicationMetrics {
    return new ApplicationMetrics().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApplicationMetrics {
    return new ApplicationMetrics().fromJsonString(jsonString, options);
  }

  static equals(a: ApplicationMetrics | PlainMessage<ApplicationMetrics> | undefined, b: ApplicationMetrics | PlainMessage<ApplicationMetrics> | undefined): boolean {
    return proto3.util.equals(ApplicationMetrics, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.ApplicationOutput
 */
export class ApplicationOutput extends Message<ApplicationOutput> {
  /**
   * @generated from field: google.protobuf.Timestamp time = 1;
   */
  time?: Timestamp;

  /**
   * @generated from field: string log = 2;
   */
  log = "";

  constructor(data?: PartialMessage<ApplicationOutput>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.ApplicationOutput";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time", kind: "message", T: Timestamp },
    { no: 2, name: "log", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApplicationOutput {
    return new ApplicationOutput().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApplicationOutput {
    return new ApplicationOutput().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApplicationOutput {
    return new ApplicationOutput().fromJsonString(jsonString, options);
  }

  static equals(a: ApplicationOutput | PlainMessage<ApplicationOutput> | undefined, b: ApplicationOutput | PlainMessage<ApplicationOutput> | undefined): boolean {
    return proto3.util.equals(ApplicationOutput, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.ApplicationOutputs
 */
export class ApplicationOutputs extends Message<ApplicationOutputs> {
  /**
   * @generated from field: repeated neoshowcase.protobuf.ApplicationOutput outputs = 1;
   */
  outputs: ApplicationOutput[] = [];

  constructor(data?: PartialMessage<ApplicationOutputs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.ApplicationOutputs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "outputs", kind: "message", T: ApplicationOutput, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApplicationOutputs {
    return new ApplicationOutputs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApplicationOutputs {
    return new ApplicationOutputs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApplicationOutputs {
    return new ApplicationOutputs().fromJsonString(jsonString, options);
  }

  static equals(a: ApplicationOutputs | PlainMessage<ApplicationOutputs> | undefined, b: ApplicationOutputs | PlainMessage<ApplicationOutputs> | undefined): boolean {
    return proto3.util.equals(ApplicationOutputs, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.Build
 */
export class Build extends Message<Build> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string application_id = 2;
   */
  applicationId = "";

  /**
   * @generated from field: string commit = 3;
   */
  commit = "";

  /**
   * @generated from field: neoshowcase.protobuf.BuildStatus status = 4;
   */
  status = BuildStatus.QUEUED;

  /**
   * @generated from field: google.protobuf.Timestamp queued_at = 5;
   */
  queuedAt?: Timestamp;

  /**
   * @generated from field: neoshowcase.protobuf.NullTimestamp started_at = 6;
   */
  startedAt?: NullTimestamp;

  /**
   * @generated from field: neoshowcase.protobuf.NullTimestamp updated_at = 7;
   */
  updatedAt?: NullTimestamp;

  /**
   * @generated from field: neoshowcase.protobuf.NullTimestamp finished_at = 8;
   */
  finishedAt?: NullTimestamp;

  /**
   * @generated from field: bool retriable = 9;
   */
  retriable = false;

  /**
   * @generated from field: repeated neoshowcase.protobuf.Artifact artifacts = 10;
   */
  artifacts: Artifact[] = [];

  /**
   * @generated from field: optional neoshowcase.protobuf.RuntimeImage runtime_image = 11;
   */
  runtimeImage?: RuntimeImage;

  constructor(data?: PartialMessage<Build>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.Build";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "application_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "commit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "status", kind: "enum", T: proto3.getEnumType(BuildStatus) },
    { no: 5, name: "queued_at", kind: "message", T: Timestamp },
    { no: 6, name: "started_at", kind: "message", T: NullTimestamp },
    { no: 7, name: "updated_at", kind: "message", T: NullTimestamp },
    { no: 8, name: "finished_at", kind: "message", T: NullTimestamp },
    { no: 9, name: "retriable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "artifacts", kind: "message", T: Artifact, repeated: true },
    { no: 11, name: "runtime_image", kind: "message", T: RuntimeImage, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Build {
    return new Build().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Build {
    return new Build().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Build {
    return new Build().fromJsonString(jsonString, options);
  }

  static equals(a: Build | PlainMessage<Build> | undefined, b: Build | PlainMessage<Build> | undefined): boolean {
    return proto3.util.equals(Build, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.BuildLog
 */
export class BuildLog extends Message<BuildLog> {
  /**
   * @generated from field: bytes log = 1;
   */
  log = new Uint8Array(0);

  constructor(data?: PartialMessage<BuildLog>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.BuildLog";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "log", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BuildLog {
    return new BuildLog().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BuildLog {
    return new BuildLog().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BuildLog {
    return new BuildLog().fromJsonString(jsonString, options);
  }

  static equals(a: BuildLog | PlainMessage<BuildLog> | undefined, b: BuildLog | PlainMessage<BuildLog> | undefined): boolean {
    return proto3.util.equals(BuildLog, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.GitRef
 */
export class GitRef extends Message<GitRef> {
  /**
   * @generated from field: string ref_name = 1;
   */
  refName = "";

  /**
   * @generated from field: string commit = 2;
   */
  commit = "";

  constructor(data?: PartialMessage<GitRef>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.GitRef";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ref_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "commit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GitRef {
    return new GitRef().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GitRef {
    return new GitRef().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GitRef {
    return new GitRef().fromJsonString(jsonString, options);
  }

  static equals(a: GitRef | PlainMessage<GitRef> | undefined, b: GitRef | PlainMessage<GitRef> | undefined): boolean {
    return proto3.util.equals(GitRef, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.GenerateKeyPairResponse
 */
export class GenerateKeyPairResponse extends Message<GenerateKeyPairResponse> {
  /**
   * @generated from field: string key_id = 1;
   */
  keyId = "";

  /**
   * @generated from field: string public_key = 2;
   */
  publicKey = "";

  constructor(data?: PartialMessage<GenerateKeyPairResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.GenerateKeyPairResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "public_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateKeyPairResponse {
    return new GenerateKeyPairResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateKeyPairResponse {
    return new GenerateKeyPairResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateKeyPairResponse {
    return new GenerateKeyPairResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateKeyPairResponse | PlainMessage<GenerateKeyPairResponse> | undefined, b: GenerateKeyPairResponse | PlainMessage<GenerateKeyPairResponse> | undefined): boolean {
    return proto3.util.equals(GenerateKeyPairResponse, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.GetUsersResponse
 */
export class GetUsersResponse extends Message<GetUsersResponse> {
  /**
   * @generated from field: repeated neoshowcase.protobuf.User users = 1;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<GetUsersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.GetUsersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUsersResponse {
    return new GetUsersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUsersResponse {
    return new GetUsersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUsersResponse {
    return new GetUsersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUsersResponse | PlainMessage<GetUsersResponse> | undefined, b: GetUsersResponse | PlainMessage<GetUsersResponse> | undefined): boolean {
    return proto3.util.equals(GetUsersResponse, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.GetUserKeysResponse
 */
export class GetUserKeysResponse extends Message<GetUserKeysResponse> {
  /**
   * @generated from field: repeated neoshowcase.protobuf.UserKey keys = 1;
   */
  keys: UserKey[] = [];

  constructor(data?: PartialMessage<GetUserKeysResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.GetUserKeysResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "keys", kind: "message", T: UserKey, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserKeysResponse {
    return new GetUserKeysResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserKeysResponse {
    return new GetUserKeysResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserKeysResponse {
    return new GetUserKeysResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserKeysResponse | PlainMessage<GetUserKeysResponse> | undefined, b: GetUserKeysResponse | PlainMessage<GetUserKeysResponse> | undefined): boolean {
    return proto3.util.equals(GetUserKeysResponse, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.CreateUserKeyRequest
 */
export class CreateUserKeyRequest extends Message<CreateUserKeyRequest> {
  /**
   * @generated from field: string public_key = 1;
   */
  publicKey = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<CreateUserKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.CreateUserKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "public_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateUserKeyRequest {
    return new CreateUserKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateUserKeyRequest {
    return new CreateUserKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateUserKeyRequest {
    return new CreateUserKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateUserKeyRequest | PlainMessage<CreateUserKeyRequest> | undefined, b: CreateUserKeyRequest | PlainMessage<CreateUserKeyRequest> | undefined): boolean {
    return proto3.util.equals(CreateUserKeyRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.DeleteUserKeyRequest
 */
export class DeleteUserKeyRequest extends Message<DeleteUserKeyRequest> {
  /**
   * @generated from field: string key_id = 1;
   */
  keyId = "";

  constructor(data?: PartialMessage<DeleteUserKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.DeleteUserKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteUserKeyRequest {
    return new DeleteUserKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteUserKeyRequest {
    return new DeleteUserKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteUserKeyRequest {
    return new DeleteUserKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteUserKeyRequest | PlainMessage<DeleteUserKeyRequest> | undefined, b: DeleteUserKeyRequest | PlainMessage<DeleteUserKeyRequest> | undefined): boolean {
    return proto3.util.equals(DeleteUserKeyRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.CreateRepositoryAuthBasic
 */
export class CreateRepositoryAuthBasic extends Message<CreateRepositoryAuthBasic> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  constructor(data?: PartialMessage<CreateRepositoryAuthBasic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.CreateRepositoryAuthBasic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRepositoryAuthBasic {
    return new CreateRepositoryAuthBasic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRepositoryAuthBasic {
    return new CreateRepositoryAuthBasic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRepositoryAuthBasic {
    return new CreateRepositoryAuthBasic().fromJsonString(jsonString, options);
  }

  static equals(a: CreateRepositoryAuthBasic | PlainMessage<CreateRepositoryAuthBasic> | undefined, b: CreateRepositoryAuthBasic | PlainMessage<CreateRepositoryAuthBasic> | undefined): boolean {
    return proto3.util.equals(CreateRepositoryAuthBasic, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.CreateRepositoryAuthSSH
 */
export class CreateRepositoryAuthSSH extends Message<CreateRepositoryAuthSSH> {
  /**
   * @generated from field: string key_id = 1;
   */
  keyId = "";

  constructor(data?: PartialMessage<CreateRepositoryAuthSSH>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.CreateRepositoryAuthSSH";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRepositoryAuthSSH {
    return new CreateRepositoryAuthSSH().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRepositoryAuthSSH {
    return new CreateRepositoryAuthSSH().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRepositoryAuthSSH {
    return new CreateRepositoryAuthSSH().fromJsonString(jsonString, options);
  }

  static equals(a: CreateRepositoryAuthSSH | PlainMessage<CreateRepositoryAuthSSH> | undefined, b: CreateRepositoryAuthSSH | PlainMessage<CreateRepositoryAuthSSH> | undefined): boolean {
    return proto3.util.equals(CreateRepositoryAuthSSH, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.CreateRepositoryAuth
 */
export class CreateRepositoryAuth extends Message<CreateRepositoryAuth> {
  /**
   * @generated from oneof neoshowcase.protobuf.CreateRepositoryAuth.auth
   */
  auth: {
    /**
     * @generated from field: google.protobuf.Empty none = 1;
     */
    value: Empty;
    case: "none";
  } | {
    /**
     * @generated from field: neoshowcase.protobuf.CreateRepositoryAuthBasic basic = 2;
     */
    value: CreateRepositoryAuthBasic;
    case: "basic";
  } | {
    /**
     * @generated from field: neoshowcase.protobuf.CreateRepositoryAuthSSH ssh = 3;
     */
    value: CreateRepositoryAuthSSH;
    case: "ssh";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<CreateRepositoryAuth>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.CreateRepositoryAuth";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "none", kind: "message", T: Empty, oneof: "auth" },
    { no: 2, name: "basic", kind: "message", T: CreateRepositoryAuthBasic, oneof: "auth" },
    { no: 3, name: "ssh", kind: "message", T: CreateRepositoryAuthSSH, oneof: "auth" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRepositoryAuth {
    return new CreateRepositoryAuth().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRepositoryAuth {
    return new CreateRepositoryAuth().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRepositoryAuth {
    return new CreateRepositoryAuth().fromJsonString(jsonString, options);
  }

  static equals(a: CreateRepositoryAuth | PlainMessage<CreateRepositoryAuth> | undefined, b: CreateRepositoryAuth | PlainMessage<CreateRepositoryAuth> | undefined): boolean {
    return proto3.util.equals(CreateRepositoryAuth, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.CreateRepositoryRequest
 */
export class CreateRepositoryRequest extends Message<CreateRepositoryRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string url = 2;
   */
  url = "";

  /**
   * @generated from field: neoshowcase.protobuf.CreateRepositoryAuth auth = 3;
   */
  auth?: CreateRepositoryAuth;

  constructor(data?: PartialMessage<CreateRepositoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.CreateRepositoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "auth", kind: "message", T: CreateRepositoryAuth },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRepositoryRequest {
    return new CreateRepositoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRepositoryRequest {
    return new CreateRepositoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRepositoryRequest {
    return new CreateRepositoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateRepositoryRequest | PlainMessage<CreateRepositoryRequest> | undefined, b: CreateRepositoryRequest | PlainMessage<CreateRepositoryRequest> | undefined): boolean {
    return proto3.util.equals(CreateRepositoryRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.GetRepositoriesRequest
 */
export class GetRepositoriesRequest extends Message<GetRepositoriesRequest> {
  /**
   * @generated from field: neoshowcase.protobuf.GetRepositoriesRequest.Scope scope = 1;
   */
  scope = GetRepositoriesRequest_Scope.MINE;

  constructor(data?: PartialMessage<GetRepositoriesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.GetRepositoriesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "scope", kind: "enum", T: proto3.getEnumType(GetRepositoriesRequest_Scope) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRepositoriesRequest {
    return new GetRepositoriesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRepositoriesRequest {
    return new GetRepositoriesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRepositoriesRequest {
    return new GetRepositoriesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRepositoriesRequest | PlainMessage<GetRepositoriesRequest> | undefined, b: GetRepositoriesRequest | PlainMessage<GetRepositoriesRequest> | undefined): boolean {
    return proto3.util.equals(GetRepositoriesRequest, a, b);
  }
}

/**
 * @generated from enum neoshowcase.protobuf.GetRepositoriesRequest.Scope
 */
export enum GetRepositoriesRequest_Scope {
  /**
   * @generated from enum value: MINE = 0;
   */
  MINE = 0,

  /**
   * @generated from enum value: CREATABLE = 1;
   */
  CREATABLE = 1,

  /**
   * @generated from enum value: PUBLIC = 2;
   */
  PUBLIC = 2,

  /**
   * admin only
   *
   * @generated from enum value: ALL = 3;
   */
  ALL = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(GetRepositoriesRequest_Scope)
proto3.util.setEnumType(GetRepositoriesRequest_Scope, "neoshowcase.protobuf.GetRepositoriesRequest.Scope", [
  { no: 0, name: "MINE" },
  { no: 1, name: "CREATABLE" },
  { no: 2, name: "PUBLIC" },
  { no: 3, name: "ALL" },
]);

/**
 * @generated from message neoshowcase.protobuf.UpdateRepositoryRequest
 */
export class UpdateRepositoryRequest extends Message<UpdateRepositoryRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: optional string name = 2;
   */
  name?: string;

  /**
   * @generated from field: optional string url = 3;
   */
  url?: string;

  /**
   * @generated from field: optional neoshowcase.protobuf.CreateRepositoryAuth auth = 4;
   */
  auth?: CreateRepositoryAuth;

  /**
   * @generated from field: optional neoshowcase.protobuf.UpdateRepositoryRequest.UpdateOwners owner_ids = 5;
   */
  ownerIds?: UpdateRepositoryRequest_UpdateOwners;

  constructor(data?: PartialMessage<UpdateRepositoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.UpdateRepositoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "auth", kind: "message", T: CreateRepositoryAuth, opt: true },
    { no: 5, name: "owner_ids", kind: "message", T: UpdateRepositoryRequest_UpdateOwners, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateRepositoryRequest {
    return new UpdateRepositoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateRepositoryRequest {
    return new UpdateRepositoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateRepositoryRequest {
    return new UpdateRepositoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateRepositoryRequest | PlainMessage<UpdateRepositoryRequest> | undefined, b: UpdateRepositoryRequest | PlainMessage<UpdateRepositoryRequest> | undefined): boolean {
    return proto3.util.equals(UpdateRepositoryRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.UpdateRepositoryRequest.UpdateOwners
 */
export class UpdateRepositoryRequest_UpdateOwners extends Message<UpdateRepositoryRequest_UpdateOwners> {
  /**
   * @generated from field: repeated string owner_ids = 1;
   */
  ownerIds: string[] = [];

  constructor(data?: PartialMessage<UpdateRepositoryRequest_UpdateOwners>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.UpdateRepositoryRequest.UpdateOwners";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateRepositoryRequest_UpdateOwners {
    return new UpdateRepositoryRequest_UpdateOwners().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateRepositoryRequest_UpdateOwners {
    return new UpdateRepositoryRequest_UpdateOwners().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateRepositoryRequest_UpdateOwners {
    return new UpdateRepositoryRequest_UpdateOwners().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateRepositoryRequest_UpdateOwners | PlainMessage<UpdateRepositoryRequest_UpdateOwners> | undefined, b: UpdateRepositoryRequest_UpdateOwners | PlainMessage<UpdateRepositoryRequest_UpdateOwners> | undefined): boolean {
    return proto3.util.equals(UpdateRepositoryRequest_UpdateOwners, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.RepositoryIdRequest
 */
export class RepositoryIdRequest extends Message<RepositoryIdRequest> {
  /**
   * @generated from field: string repository_id = 1;
   */
  repositoryId = "";

  constructor(data?: PartialMessage<RepositoryIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.RepositoryIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "repository_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RepositoryIdRequest {
    return new RepositoryIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RepositoryIdRequest {
    return new RepositoryIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RepositoryIdRequest {
    return new RepositoryIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RepositoryIdRequest | PlainMessage<RepositoryIdRequest> | undefined, b: RepositoryIdRequest | PlainMessage<RepositoryIdRequest> | undefined): boolean {
    return proto3.util.equals(RepositoryIdRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.GetRepositoryCommitsRequest
 */
export class GetRepositoryCommitsRequest extends Message<GetRepositoryCommitsRequest> {
  /**
   * @generated from field: repeated string hashes = 1;
   */
  hashes: string[] = [];

  constructor(data?: PartialMessage<GetRepositoryCommitsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.GetRepositoryCommitsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hashes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRepositoryCommitsRequest {
    return new GetRepositoryCommitsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRepositoryCommitsRequest {
    return new GetRepositoryCommitsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRepositoryCommitsRequest {
    return new GetRepositoryCommitsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRepositoryCommitsRequest | PlainMessage<GetRepositoryCommitsRequest> | undefined, b: GetRepositoryCommitsRequest | PlainMessage<GetRepositoryCommitsRequest> | undefined): boolean {
    return proto3.util.equals(GetRepositoryCommitsRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.GetRepositoryCommitsResponse
 */
export class GetRepositoryCommitsResponse extends Message<GetRepositoryCommitsResponse> {
  /**
   * @generated from field: repeated neoshowcase.protobuf.SimpleCommit commits = 1;
   */
  commits: SimpleCommit[] = [];

  constructor(data?: PartialMessage<GetRepositoryCommitsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.GetRepositoryCommitsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "commits", kind: "message", T: SimpleCommit, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRepositoryCommitsResponse {
    return new GetRepositoryCommitsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRepositoryCommitsResponse {
    return new GetRepositoryCommitsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRepositoryCommitsResponse {
    return new GetRepositoryCommitsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRepositoryCommitsResponse | PlainMessage<GetRepositoryCommitsResponse> | undefined, b: GetRepositoryCommitsResponse | PlainMessage<GetRepositoryCommitsResponse> | undefined): boolean {
    return proto3.util.equals(GetRepositoryCommitsResponse, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.CreateWebsiteRequest
 */
export class CreateWebsiteRequest extends Message<CreateWebsiteRequest> {
  /**
   * @generated from field: string fqdn = 1;
   */
  fqdn = "";

  /**
   * @generated from field: string path_prefix = 2;
   */
  pathPrefix = "";

  /**
   * @generated from field: bool strip_prefix = 3;
   */
  stripPrefix = false;

  /**
   * @generated from field: bool https = 4;
   */
  https = false;

  /**
   * @generated from field: bool h2c = 5;
   */
  h2c = false;

  /**
   * @generated from field: int32 http_port = 6;
   */
  httpPort = 0;

  /**
   * @generated from field: neoshowcase.protobuf.AuthenticationType authentication = 7;
   */
  authentication = AuthenticationType.OFF;

  constructor(data?: PartialMessage<CreateWebsiteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.CreateWebsiteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fqdn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "strip_prefix", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "https", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "h2c", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "http_port", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "authentication", kind: "enum", T: proto3.getEnumType(AuthenticationType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateWebsiteRequest {
    return new CreateWebsiteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateWebsiteRequest {
    return new CreateWebsiteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateWebsiteRequest {
    return new CreateWebsiteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateWebsiteRequest | PlainMessage<CreateWebsiteRequest> | undefined, b: CreateWebsiteRequest | PlainMessage<CreateWebsiteRequest> | undefined): boolean {
    return proto3.util.equals(CreateWebsiteRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.DeleteWebsiteRequest
 */
export class DeleteWebsiteRequest extends Message<DeleteWebsiteRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteWebsiteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.DeleteWebsiteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteWebsiteRequest {
    return new DeleteWebsiteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteWebsiteRequest {
    return new DeleteWebsiteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteWebsiteRequest {
    return new DeleteWebsiteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteWebsiteRequest | PlainMessage<DeleteWebsiteRequest> | undefined, b: DeleteWebsiteRequest | PlainMessage<DeleteWebsiteRequest> | undefined): boolean {
    return proto3.util.equals(DeleteWebsiteRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.CreateApplicationRequest
 */
export class CreateApplicationRequest extends Message<CreateApplicationRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string repository_id = 2;
   */
  repositoryId = "";

  /**
   * @generated from field: string ref_name = 3;
   */
  refName = "";

  /**
   * @generated from field: neoshowcase.protobuf.ApplicationConfig config = 4;
   */
  config?: ApplicationConfig;

  /**
   * @generated from field: repeated neoshowcase.protobuf.CreateWebsiteRequest websites = 5;
   */
  websites: CreateWebsiteRequest[] = [];

  /**
   * @generated from field: repeated neoshowcase.protobuf.PortPublication port_publications = 6;
   */
  portPublications: PortPublication[] = [];

  /**
   * @generated from field: bool start_on_create = 7;
   */
  startOnCreate = false;

  constructor(data?: PartialMessage<CreateApplicationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.CreateApplicationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "repository_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ref_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "config", kind: "message", T: ApplicationConfig },
    { no: 5, name: "websites", kind: "message", T: CreateWebsiteRequest, repeated: true },
    { no: 6, name: "port_publications", kind: "message", T: PortPublication, repeated: true },
    { no: 7, name: "start_on_create", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateApplicationRequest {
    return new CreateApplicationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateApplicationRequest {
    return new CreateApplicationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateApplicationRequest {
    return new CreateApplicationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateApplicationRequest | PlainMessage<CreateApplicationRequest> | undefined, b: CreateApplicationRequest | PlainMessage<CreateApplicationRequest> | undefined): boolean {
    return proto3.util.equals(CreateApplicationRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.GetApplicationsRequest
 */
export class GetApplicationsRequest extends Message<GetApplicationsRequest> {
  /**
   * @generated from field: neoshowcase.protobuf.GetApplicationsRequest.Scope scope = 1;
   */
  scope = GetApplicationsRequest_Scope.MINE;

  /**
   * @generated from field: optional string repository_id = 2;
   */
  repositoryId?: string;

  constructor(data?: PartialMessage<GetApplicationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.GetApplicationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "scope", kind: "enum", T: proto3.getEnumType(GetApplicationsRequest_Scope) },
    { no: 2, name: "repository_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetApplicationsRequest {
    return new GetApplicationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetApplicationsRequest {
    return new GetApplicationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetApplicationsRequest {
    return new GetApplicationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetApplicationsRequest | PlainMessage<GetApplicationsRequest> | undefined, b: GetApplicationsRequest | PlainMessage<GetApplicationsRequest> | undefined): boolean {
    return proto3.util.equals(GetApplicationsRequest, a, b);
  }
}

/**
 * @generated from enum neoshowcase.protobuf.GetApplicationsRequest.Scope
 */
export enum GetApplicationsRequest_Scope {
  /**
   * @generated from enum value: MINE = 0;
   */
  MINE = 0,

  /**
   * @generated from enum value: ALL = 1;
   */
  ALL = 1,

  /**
   * @generated from enum value: REPOSITORY = 2;
   */
  REPOSITORY = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(GetApplicationsRequest_Scope)
proto3.util.setEnumType(GetApplicationsRequest_Scope, "neoshowcase.protobuf.GetApplicationsRequest.Scope", [
  { no: 0, name: "MINE" },
  { no: 1, name: "ALL" },
  { no: 2, name: "REPOSITORY" },
]);

/**
 * @generated from message neoshowcase.protobuf.UpdateApplicationRequest
 */
export class UpdateApplicationRequest extends Message<UpdateApplicationRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: optional string name = 2;
   */
  name?: string;

  /**
   * @generated from field: optional string repository_id = 3;
   */
  repositoryId?: string;

  /**
   * @generated from field: optional string ref_name = 4;
   */
  refName?: string;

  /**
   * @generated from field: optional neoshowcase.protobuf.ApplicationConfig config = 5;
   */
  config?: ApplicationConfig;

  /**
   * @generated from field: optional neoshowcase.protobuf.UpdateApplicationRequest.UpdateWebsites websites = 6;
   */
  websites?: UpdateApplicationRequest_UpdateWebsites;

  /**
   * @generated from field: optional neoshowcase.protobuf.UpdateApplicationRequest.UpdatePorts port_publications = 7;
   */
  portPublications?: UpdateApplicationRequest_UpdatePorts;

  /**
   * @generated from field: optional neoshowcase.protobuf.UpdateApplicationRequest.UpdateOwners owner_ids = 8;
   */
  ownerIds?: UpdateApplicationRequest_UpdateOwners;

  constructor(data?: PartialMessage<UpdateApplicationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.UpdateApplicationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "repository_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "ref_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "config", kind: "message", T: ApplicationConfig, opt: true },
    { no: 6, name: "websites", kind: "message", T: UpdateApplicationRequest_UpdateWebsites, opt: true },
    { no: 7, name: "port_publications", kind: "message", T: UpdateApplicationRequest_UpdatePorts, opt: true },
    { no: 8, name: "owner_ids", kind: "message", T: UpdateApplicationRequest_UpdateOwners, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateApplicationRequest {
    return new UpdateApplicationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateApplicationRequest {
    return new UpdateApplicationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateApplicationRequest {
    return new UpdateApplicationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateApplicationRequest | PlainMessage<UpdateApplicationRequest> | undefined, b: UpdateApplicationRequest | PlainMessage<UpdateApplicationRequest> | undefined): boolean {
    return proto3.util.equals(UpdateApplicationRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.UpdateApplicationRequest.UpdateWebsites
 */
export class UpdateApplicationRequest_UpdateWebsites extends Message<UpdateApplicationRequest_UpdateWebsites> {
  /**
   * @generated from field: repeated neoshowcase.protobuf.CreateWebsiteRequest websites = 1;
   */
  websites: CreateWebsiteRequest[] = [];

  constructor(data?: PartialMessage<UpdateApplicationRequest_UpdateWebsites>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.UpdateApplicationRequest.UpdateWebsites";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "websites", kind: "message", T: CreateWebsiteRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateApplicationRequest_UpdateWebsites {
    return new UpdateApplicationRequest_UpdateWebsites().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateApplicationRequest_UpdateWebsites {
    return new UpdateApplicationRequest_UpdateWebsites().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateApplicationRequest_UpdateWebsites {
    return new UpdateApplicationRequest_UpdateWebsites().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateApplicationRequest_UpdateWebsites | PlainMessage<UpdateApplicationRequest_UpdateWebsites> | undefined, b: UpdateApplicationRequest_UpdateWebsites | PlainMessage<UpdateApplicationRequest_UpdateWebsites> | undefined): boolean {
    return proto3.util.equals(UpdateApplicationRequest_UpdateWebsites, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.UpdateApplicationRequest.UpdatePorts
 */
export class UpdateApplicationRequest_UpdatePorts extends Message<UpdateApplicationRequest_UpdatePorts> {
  /**
   * @generated from field: repeated neoshowcase.protobuf.PortPublication port_publications = 1;
   */
  portPublications: PortPublication[] = [];

  constructor(data?: PartialMessage<UpdateApplicationRequest_UpdatePorts>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.UpdateApplicationRequest.UpdatePorts";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port_publications", kind: "message", T: PortPublication, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateApplicationRequest_UpdatePorts {
    return new UpdateApplicationRequest_UpdatePorts().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateApplicationRequest_UpdatePorts {
    return new UpdateApplicationRequest_UpdatePorts().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateApplicationRequest_UpdatePorts {
    return new UpdateApplicationRequest_UpdatePorts().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateApplicationRequest_UpdatePorts | PlainMessage<UpdateApplicationRequest_UpdatePorts> | undefined, b: UpdateApplicationRequest_UpdatePorts | PlainMessage<UpdateApplicationRequest_UpdatePorts> | undefined): boolean {
    return proto3.util.equals(UpdateApplicationRequest_UpdatePorts, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.UpdateApplicationRequest.UpdateOwners
 */
export class UpdateApplicationRequest_UpdateOwners extends Message<UpdateApplicationRequest_UpdateOwners> {
  /**
   * @generated from field: repeated string owner_ids = 1;
   */
  ownerIds: string[] = [];

  constructor(data?: PartialMessage<UpdateApplicationRequest_UpdateOwners>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.UpdateApplicationRequest.UpdateOwners";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateApplicationRequest_UpdateOwners {
    return new UpdateApplicationRequest_UpdateOwners().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateApplicationRequest_UpdateOwners {
    return new UpdateApplicationRequest_UpdateOwners().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateApplicationRequest_UpdateOwners {
    return new UpdateApplicationRequest_UpdateOwners().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateApplicationRequest_UpdateOwners | PlainMessage<UpdateApplicationRequest_UpdateOwners> | undefined, b: UpdateApplicationRequest_UpdateOwners | PlainMessage<UpdateApplicationRequest_UpdateOwners> | undefined): boolean {
    return proto3.util.equals(UpdateApplicationRequest_UpdateOwners, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.GetRepositoriesResponse
 */
export class GetRepositoriesResponse extends Message<GetRepositoriesResponse> {
  /**
   * @generated from field: repeated neoshowcase.protobuf.Repository repositories = 1;
   */
  repositories: Repository[] = [];

  constructor(data?: PartialMessage<GetRepositoriesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.GetRepositoriesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "repositories", kind: "message", T: Repository, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRepositoriesResponse {
    return new GetRepositoriesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRepositoriesResponse {
    return new GetRepositoriesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRepositoriesResponse {
    return new GetRepositoriesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRepositoriesResponse | PlainMessage<GetRepositoriesResponse> | undefined, b: GetRepositoriesResponse | PlainMessage<GetRepositoriesResponse> | undefined): boolean {
    return proto3.util.equals(GetRepositoriesResponse, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.GetApplicationsResponse
 */
export class GetApplicationsResponse extends Message<GetApplicationsResponse> {
  /**
   * @generated from field: repeated neoshowcase.protobuf.Application applications = 1;
   */
  applications: Application[] = [];

  constructor(data?: PartialMessage<GetApplicationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.GetApplicationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "applications", kind: "message", T: Application, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetApplicationsResponse {
    return new GetApplicationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetApplicationsResponse {
    return new GetApplicationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetApplicationsResponse {
    return new GetApplicationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetApplicationsResponse | PlainMessage<GetApplicationsResponse> | undefined, b: GetApplicationsResponse | PlainMessage<GetApplicationsResponse> | undefined): boolean {
    return proto3.util.equals(GetApplicationsResponse, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.ApplicationIdRequest
 */
export class ApplicationIdRequest extends Message<ApplicationIdRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<ApplicationIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.ApplicationIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApplicationIdRequest {
    return new ApplicationIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApplicationIdRequest {
    return new ApplicationIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApplicationIdRequest {
    return new ApplicationIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ApplicationIdRequest | PlainMessage<ApplicationIdRequest> | undefined, b: ApplicationIdRequest | PlainMessage<ApplicationIdRequest> | undefined): boolean {
    return proto3.util.equals(ApplicationIdRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.GetAllBuildsRequest
 */
export class GetAllBuildsRequest extends Message<GetAllBuildsRequest> {
  /**
   * zero-indexed page
   *
   * @generated from field: int32 page = 1;
   */
  page = 0;

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0;

  constructor(data?: PartialMessage<GetAllBuildsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.GetAllBuildsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAllBuildsRequest {
    return new GetAllBuildsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAllBuildsRequest {
    return new GetAllBuildsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAllBuildsRequest {
    return new GetAllBuildsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAllBuildsRequest | PlainMessage<GetAllBuildsRequest> | undefined, b: GetAllBuildsRequest | PlainMessage<GetAllBuildsRequest> | undefined): boolean {
    return proto3.util.equals(GetAllBuildsRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.BuildIdRequest
 */
export class BuildIdRequest extends Message<BuildIdRequest> {
  /**
   * @generated from field: string build_id = 1;
   */
  buildId = "";

  constructor(data?: PartialMessage<BuildIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.BuildIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BuildIdRequest {
    return new BuildIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BuildIdRequest {
    return new BuildIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BuildIdRequest {
    return new BuildIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BuildIdRequest | PlainMessage<BuildIdRequest> | undefined, b: BuildIdRequest | PlainMessage<BuildIdRequest> | undefined): boolean {
    return proto3.util.equals(BuildIdRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.ArtifactIdRequest
 */
export class ArtifactIdRequest extends Message<ArtifactIdRequest> {
  /**
   * @generated from field: string artifact_id = 1;
   */
  artifactId = "";

  constructor(data?: PartialMessage<ArtifactIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.ArtifactIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "artifact_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ArtifactIdRequest {
    return new ArtifactIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ArtifactIdRequest {
    return new ArtifactIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ArtifactIdRequest {
    return new ArtifactIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ArtifactIdRequest | PlainMessage<ArtifactIdRequest> | undefined, b: ArtifactIdRequest | PlainMessage<ArtifactIdRequest> | undefined): boolean {
    return proto3.util.equals(ArtifactIdRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.GetBuildsResponse
 */
export class GetBuildsResponse extends Message<GetBuildsResponse> {
  /**
   * @generated from field: repeated neoshowcase.protobuf.Build builds = 1;
   */
  builds: Build[] = [];

  constructor(data?: PartialMessage<GetBuildsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.GetBuildsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "builds", kind: "message", T: Build, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBuildsResponse {
    return new GetBuildsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBuildsResponse {
    return new GetBuildsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBuildsResponse {
    return new GetBuildsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetBuildsResponse | PlainMessage<GetBuildsResponse> | undefined, b: GetBuildsResponse | PlainMessage<GetBuildsResponse> | undefined): boolean {
    return proto3.util.equals(GetBuildsResponse, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.SetApplicationEnvVarRequest
 */
export class SetApplicationEnvVarRequest extends Message<SetApplicationEnvVarRequest> {
  /**
   * @generated from field: string application_id = 1;
   */
  applicationId = "";

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: string value = 3;
   */
  value = "";

  constructor(data?: PartialMessage<SetApplicationEnvVarRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.SetApplicationEnvVarRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "application_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetApplicationEnvVarRequest {
    return new SetApplicationEnvVarRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetApplicationEnvVarRequest {
    return new SetApplicationEnvVarRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetApplicationEnvVarRequest {
    return new SetApplicationEnvVarRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetApplicationEnvVarRequest | PlainMessage<SetApplicationEnvVarRequest> | undefined, b: SetApplicationEnvVarRequest | PlainMessage<SetApplicationEnvVarRequest> | undefined): boolean {
    return proto3.util.equals(SetApplicationEnvVarRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.DeleteApplicationEnvVarRequest
 */
export class DeleteApplicationEnvVarRequest extends Message<DeleteApplicationEnvVarRequest> {
  /**
   * @generated from field: string application_id = 1;
   */
  applicationId = "";

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  constructor(data?: PartialMessage<DeleteApplicationEnvVarRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.DeleteApplicationEnvVarRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "application_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteApplicationEnvVarRequest {
    return new DeleteApplicationEnvVarRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteApplicationEnvVarRequest {
    return new DeleteApplicationEnvVarRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteApplicationEnvVarRequest {
    return new DeleteApplicationEnvVarRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteApplicationEnvVarRequest | PlainMessage<DeleteApplicationEnvVarRequest> | undefined, b: DeleteApplicationEnvVarRequest | PlainMessage<DeleteApplicationEnvVarRequest> | undefined): boolean {
    return proto3.util.equals(DeleteApplicationEnvVarRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.GetApplicationMetricsRequest
 */
export class GetApplicationMetricsRequest extends Message<GetApplicationMetricsRequest> {
  /**
   * @generated from field: string application_id = 1;
   */
  applicationId = "";

  /**
   * @generated from field: string metrics_name = 2;
   */
  metricsName = "";

  /**
   * @generated from field: google.protobuf.Timestamp before = 3;
   */
  before?: Timestamp;

  /**
   * @generated from field: int64 limit_seconds = 4;
   */
  limitSeconds = protoInt64.zero;

  constructor(data?: PartialMessage<GetApplicationMetricsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.GetApplicationMetricsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "application_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metrics_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "before", kind: "message", T: Timestamp },
    { no: 4, name: "limit_seconds", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetApplicationMetricsRequest {
    return new GetApplicationMetricsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetApplicationMetricsRequest {
    return new GetApplicationMetricsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetApplicationMetricsRequest {
    return new GetApplicationMetricsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetApplicationMetricsRequest | PlainMessage<GetApplicationMetricsRequest> | undefined, b: GetApplicationMetricsRequest | PlainMessage<GetApplicationMetricsRequest> | undefined): boolean {
    return proto3.util.equals(GetApplicationMetricsRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.GetOutputRequest
 */
export class GetOutputRequest extends Message<GetOutputRequest> {
  /**
   * @generated from field: string application_id = 1;
   */
  applicationId = "";

  /**
   * @generated from field: google.protobuf.Timestamp before = 2;
   */
  before?: Timestamp;

  /**
   * @generated from field: int32 limit = 3;
   */
  limit = 0;

  constructor(data?: PartialMessage<GetOutputRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.GetOutputRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "application_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "before", kind: "message", T: Timestamp },
    { no: 3, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOutputRequest {
    return new GetOutputRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOutputRequest {
    return new GetOutputRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOutputRequest {
    return new GetOutputRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOutputRequest | PlainMessage<GetOutputRequest> | undefined, b: GetOutputRequest | PlainMessage<GetOutputRequest> | undefined): boolean {
    return proto3.util.equals(GetOutputRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.GetOutputStreamRequest
 */
export class GetOutputStreamRequest extends Message<GetOutputStreamRequest> {
  /**
   * @generated from field: string application_id = 1;
   */
  applicationId = "";

  /**
   * @generated from field: google.protobuf.Timestamp begin = 2;
   */
  begin?: Timestamp;

  constructor(data?: PartialMessage<GetOutputStreamRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.GetOutputStreamRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "application_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "begin", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOutputStreamRequest {
    return new GetOutputStreamRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOutputStreamRequest {
    return new GetOutputStreamRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOutputStreamRequest {
    return new GetOutputStreamRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOutputStreamRequest | PlainMessage<GetOutputStreamRequest> | undefined, b: GetOutputStreamRequest | PlainMessage<GetOutputStreamRequest> | undefined): boolean {
    return proto3.util.equals(GetOutputStreamRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.RetryCommitBuildRequest
 */
export class RetryCommitBuildRequest extends Message<RetryCommitBuildRequest> {
  /**
   * @generated from field: string application_id = 1;
   */
  applicationId = "";

  /**
   * @generated from field: string commit = 2;
   */
  commit = "";

  constructor(data?: PartialMessage<RetryCommitBuildRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.RetryCommitBuildRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "application_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "commit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RetryCommitBuildRequest {
    return new RetryCommitBuildRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RetryCommitBuildRequest {
    return new RetryCommitBuildRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RetryCommitBuildRequest {
    return new RetryCommitBuildRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RetryCommitBuildRequest | PlainMessage<RetryCommitBuildRequest> | undefined, b: RetryCommitBuildRequest | PlainMessage<RetryCommitBuildRequest> | undefined): boolean {
    return proto3.util.equals(RetryCommitBuildRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.GetRepositoryRefsResponse
 */
export class GetRepositoryRefsResponse extends Message<GetRepositoryRefsResponse> {
  /**
   * @generated from field: repeated neoshowcase.protobuf.GitRef refs = 1;
   */
  refs: GitRef[] = [];

  constructor(data?: PartialMessage<GetRepositoryRefsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.GetRepositoryRefsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "refs", kind: "message", T: GitRef, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRepositoryRefsResponse {
    return new GetRepositoryRefsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRepositoryRefsResponse {
    return new GetRepositoryRefsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRepositoryRefsResponse {
    return new GetRepositoryRefsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRepositoryRefsResponse | PlainMessage<GetRepositoryRefsResponse> | undefined, b: GetRepositoryRefsResponse | PlainMessage<GetRepositoryRefsResponse> | undefined): boolean {
    return proto3.util.equals(GetRepositoryRefsResponse, a, b);
  }
}

