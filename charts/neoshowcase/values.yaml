global:
  # image defines NeoShowcase image config.
  image:
    repository: ghcr.io/traptitech/
    prefix: ns-
    # Default image pull policy for all NeoShowcase components
    pullPolicy: Always
  # If specified, overrides the chart app version.
  # Used by NeoShowcase image tags.
  appVersionOverride: ""

# common defines various settings for use by all NeoShowcase components.
common:
  # Available log levels: trace, debug, info, warn, or error
  logLevel: info

  additionalLinks:
    - name: Wiki
      url: https://wiki.trap.jp/services/NeoShowcase
    - name: DB Admin
      url: https://adminer.ns.trap.jp/

  # db is used by NeoShowcase system components
  db:
    host: mariadb.db.svc.cluster.local
    port: 3306
    username: root
    # password: <defined by secret>
    database: neoshowcase

  # storage is used by NeoShowcase system components
  storage:
    type: s3
    local:
      dir: /data
    s3:
      bucket: neoshowcase
      # accessKey: <defined by secret>
      # accessSecret: <defined by secret>
      region: ap-northeast-1
      # endpoint: https://example.com

  # image is used to store user app images.
  image:
    registry:
      scheme: https
      addr: registry.ns.trap.jp
      username: "robot$neoshowcase"
      # password: <defined by secret>
    namePrefix: ns-apps/
    tmpNamePrefix: ns-apps-tmp/

  # Additional mounts to NeoShowcase component containers
  additionalVolumes: []
    # - name: project
    #   hostPath:
    #     path: /work
  additionalVolumeMounts: []
    # - name: project
    #   subPath: .local-dev/local-storage
    #   mountPath: /data

# auth defines user authentication.
auth:
  # header defines the name of the header auth.
  header: X-Forwarded-User
  # avatarBaseURL is used to display user icons in the dashboard.
  avatarBaseURL: https://q.trap.jp/api/v3/public/icon/

# userMariaDB is used by user apps.
userMariaDB:
  host: mariadb.db.svc.cluster.local
  port: 3306
  adminUser: root
  # adminPassword: <defined by secret>

# userMongoDB is used by user apps.
userMongoDB:
  host: mongo.db.svc.cluster.local
  port: 27017
  adminUser: root
  # adminPassword: <defined by secret>

# secret defines secret names to be used by NeoShowcase components.
secret:
  # Expected keys:
  #  db-password: Used by NeoShowcase system
  #  mariadb-password: Used by user apps
  #  mongodb-password: Used by user apps
  #  s3-access-key: Needed if using S3 storage at common.storage.type
  #  s3-access-secret: Needed if using S3 storage at common.storage.type
  #  registry-password: Used to store user app images
  #  gitea-token: Needed if gitea-integration is enabled
  #  controller-token: Token used by components to access ns-controller
  ns:
    existingName: ns
  # Keys are used by gateway and controller to clone user repositories.
  # The corresponding public key is intended to be set to an admin deploy-key of an external Gitea instance.
  keys:
    existingName: ns-keys
    # Only ed25519 type is supported for now.
    keyName: id_ed25519

# known_hosts is mounted into builder, controller, and gateway to clone user repositories.
known_hosts:
  additionalContent: ""

# domains define available domains to be used by user apps.
# For more, see pkg/infrastructure/k8simpl/config.go.
domains: []
#  - domain: "*.trap.show"
#    excludes: []
#    auth:
#      available: true
#      soft:
#        - name: auth-trap-show-soft
#          namespace: auth
#      hard:
#        - name: auth-trap-show-hard
#          namespace: auth

# tls defines tls setting for user app ingress.
# For more, see pkg/infrastructure/k8simpl/config.go.
tls:
  type: cert-manager
  certManager:
    issuer:
      kind: ClusterIssuer
      name: cluster-issuer
    wildcard:
      domains: []
        # - "*.trap.show"

# ports define available port-forward ports to be used by user apps.
# For more, see pkg/infrastructure/k8simpl/config.go.
ports: []
#  - startPort: 39000
#    endPort: 39999
#    protocol: tcp
#  - startPort: 39000
#    endPort: 39999
#    protocol: udp

# observability (o11y) defines user apps' o11y configuration to be viewed from the dashboard.
observability:
  log:
    type: victorialogs
    loki:
      endpoint: http://loki.monitor.svc.cluster.local:3100
      queryTemplate: >-
        {namespace="ns-apps",pod="nsapp-{{ .App.ID }}-0"}
    victorialogs:
      endpoint: http://vl-victoria-logs-single-server.victoria-logs.svc.cluster.local:9428
      queryTemplate: >-
        {namespace="ns-apps",pod="nsapp-{{ .App.ID }}-0"}
  metrics:
    type: prometheus
    prometheus:
      endpoint: http://victoria-metrics.monitor.svc.cluster.local:8428
      queries:
        - name: CPU
          template: >-
            rate(container_cpu_user_seconds_total{namespace="ns-apps", pod="nsapp-{{ .App.ID }}-0", container="app"}[5m])
            + rate(container_cpu_system_seconds_total{namespace="ns-apps", pod="nsapp-{{ .App.ID }}-0", container="app"}[5m])
        - name: Memory
          template: >-
            container_memory_usage_bytes{namespace="ns-apps", pod="nsapp-{{ .App.ID }}-0", container="app"}
            + container_memory_swap{namespace="ns-apps", pod="nsapp-{{ .App.ID }}-0", container="app"}

# app defines user app pod configurations.
app:
  namespace: ns-apps
  imagePullSecret: ''
  labels: []
    # Example to enable ArgoCD orphaned resource monitoring:
    # - key: app.kubernetes.io/instance
    #   value: ns-apps
  nodeSelector: {}
    # - key: kubernetes.io/arch
    #   value: amd64
  tolerations: []
    # - key: ns.trap.jp/worker
    #   operator: Exists
    #   effect: NoSchedule
  topologySpreadConstraints: []
    # - maxSkew: 1
    #   topologyKey: kubernetes.io/hostname
    #   whenUnsatisfiable: DoNotSchedule
    #   labelSelector:
    #     matchLabels:
    #       - key: ns.trap.jp/managed
    #         value: "true"
    #   nodeAffinityPolicy: Honor
    #   nodeTaintsPolicy: Ignore
  resources: {}
    # requests:
    #   cpu: 10m
    #   memory: 50Mi
    # limits:
    #   cpu: "1.6"
    #   memory: 1Gi
  service:
    ipFamilies: []
      # - IPv4
      # - IPv6
    # Allowed values: "", "SingleStack", "PreferDualStack", "RequireDualStack"
    ipFamilyPolicy: ""
  routing:
    type: traefik
    traefik:
      priorityOffset: 0

# ns-builder component
builder:
  replicas: 1
  nodeSelector: {}
  tolerations: []
  topologySpreadConstraints: []
  resources: {}
  # imagePullPolicy for builder component
  imagePullPolicy: ""
  buildpack:
    image: paketobuildpacks/builder:full
    resources: {}
    # imagePullPolicy for buildpack image (defaults to Always for build images)
    imagePullPolicy: Always
  buildkit:
    image: moby/buildkit:rootless
    resources: {}
    # imagePullPolicy for buildkit image (defaults to Always for build images)
    imagePullPolicy: Always
    buildkitd.toml: ""

# ns-controller component
controller:
  replicas: 1
  nodeSelector: {}
  tolerations: []
  topologySpreadConstraints: []
  resources: {}
  # imagePullPolicy for controller component
  imagePullPolicy: ""
  ssh:
    host: ns.trap.jp
    port: 2201

# ns-dashboard component
dashboard:
  replicas: 1
  nodeSelector: {}
  tolerations: []
  topologySpreadConstraints: []
  resources: {}
  # imagePullPolicy for dashboard component
  imagePullPolicy: ""

# ns-gateway component
gateway:
  replicas: 1
  nodeSelector: {}
  tolerations: []
  topologySpreadConstraints: []
  resources: {}
  # imagePullPolicy for gateway component
  imagePullPolicy: ""

# ns-gitea-integration component
giteaIntegration:
  enabled: false
  nodeSelector: {}
  tolerations: []
  topologySpreadConstraints: []
  resources: {}
  # imagePullPolicy for gitea-integration component
  imagePullPolicy: ""
  url: https://git.trap.jp

# sablier component starts user pods on demand.
sablier:
  # If enabled, requires "experimental.plugins.sablier" configuration on the traefik instance.
  enabled: true
  nodeSelector: {}
  tolerations: []
  topologySpreadConstraints: []
  resources: {}
  # imagePullPolicy for sablier component
  imagePullPolicy: ""
  sessionDuration: 1h
  dynamic:
    theme: neoshowcase
  blocking:
    timeout: 1m

# ns-ssgen component
ssgen:
  replicas: 2
  nodeSelector: {}
  tolerations: []
  topologySpreadConstraints: []
  resources: {}
  # imagePullPolicy for ssgen component
  imagePullPolicy: ""
  pvc:
    storageClassName: ""
    storage: 1Gi
  caddy:
    image: caddy:2-alpine
    resources: {}
    # imagePullPolicy for caddy image (defaults to Always)
    imagePullPolicy: Always

# ingressRoute renders IngressRoute resource, if enabled.
ingressRoute:
  enabled: true
  host: ns.trap.jp
  entrypoints:
    - web
  tls:
    # secretName defines IngressRoute tls.secretName.
    # Set to empty string to disable tls config.
    secretName: ""
  middlewares: []
    # - name: ns-auth-dev
    #   namespace: auth
